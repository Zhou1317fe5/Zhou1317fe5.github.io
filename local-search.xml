<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>09-Java字符串</title>
    <link href="/2023/06/29/09-Java%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2023/06/29/09-Java%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-String类"><a href="#1-String类" class="headerlink" title="1.String类"></a>1.String类</h2><h3 id="1-1String类概述"><a href="#1-1String类概述" class="headerlink" title="1.1String类概述"></a>1.1String类概述</h3><pre><code class="hljs">String 类代表字符串，Java 程序中的所有字符串文字（例如“abc”）都被实现为此类的实例。也就是说，Java 程序中所有的双引号字符串，都是 String 类的对象。String 类在 java.lang 包下，所以使用的时候不需要导包！</code></pre><h3 id="1-2String类的特点"><a href="#1-2String类的特点" class="headerlink" title="1.2String类的特点"></a>1.2String类的特点</h3><ul><li>字符串不可变，它们的值在创建后不能被更改</li><li>虽然 String 的值是不可变的，但是它们可以被共享</li><li>字符串效果上相当于字符数组( char[] )，但是底层原理是字节数组( byte[] )</li></ul><h3 id="1-3String类的构造方法"><a href="#1-3String类的构造方法" class="headerlink" title="1.3String类的构造方法"></a>1.3String类的构造方法</h3><ul><li><p>常用的构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public   String()</td><td>创建一个空白字符串对象，不含有任何内容</td></tr><tr><td>public   String(char[] chs)</td><td>根据字符数组的内容，来创建字符串对象</td></tr><tr><td>public   String(byte[] bys)</td><td>根据字节数组的内容，来创建字符串对象</td></tr><tr><td>String s &#x3D;   “abc”;</td><td>直接赋值的方式创建字符串对象，内容就是abc</td></tr></tbody></table></li></ul><h3 id="1-4创建字符串对象两种方式的区别"><a href="#1-4创建字符串对象两种方式的区别" class="headerlink" title="1.4创建字符串对象两种方式的区别"></a>1.4创建字符串对象两种方式的区别</h3><ul><li><p>通过构造方法创建<br> 通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然内容相同，但是地址值不同</p></li><li><p>直接赋值方式创建<br> 当使用双引号直接赋值时，系统会检查该字符串在串池中是否存在。 不存在：创建新的 存在：复用</p></li></ul><p>String是个引用类型,有它的属性和方法,继承obj,只不过重写了返回的对象是他自己,也就是字符组。</p><p>赋值：在串池里面，new出来的：在堆里面<br>串池也是堆内存中开辟的一个空间</p><h3 id="1-5字符串的比较"><a href="#1-5字符串的比较" class="headerlink" title="1.5字符串的比较"></a>1.5字符串的比较</h3><h4 id="1-5-1-号的作用"><a href="#1-5-1-号的作用" class="headerlink" title="1.5.1  ==  号的作用"></a>1.5.1  <code>==</code>  号的作用</h4><ul><li>比较基本数据类型：比较的是具体的值</li><li>比较引用数据类型：比较的是对象地址值</li></ul><h4 id="1-5-2equals方法的作用"><a href="#1-5-2equals方法的作用" class="headerlink" title="1.5.2equals方法的作用"></a>1.5.2equals方法的作用</h4><ul><li>方法介绍</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> s1.equals(s2)     比较两个字符串内容是否完全相同、区分大小写<br>           equalsIgnoreCase        忽略大小写<br></code></pre></td></tr></table></figure><ul><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//构造方法的方式得到对象</span><br>        <span class="hljs-type">char</span>[] chs = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chs);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chs);<br><br>        <span class="hljs-comment">//直接赋值的方式得到对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><br>        <span class="hljs-comment">//比较字符串对象地址是否相同</span><br>        System.out.println(s1 == s2);<br>        System.out.println(s1 == s3);<br>        System.out.println(s3 == s4);<br>        System.out.println(<span class="hljs-string">&quot;--------&quot;</span>);<br><br>        <span class="hljs-comment">//比较字符串内容是否相同</span><br>        System.out.println(s1.equals(s2));<br>        System.out.println(s1.equals(s3));<br>        System.out.println(s3.equals(s4));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-6遍历字符串案例"><a href="#1-6遍历字符串案例" class="headerlink" title="1.6遍历字符串案例"></a>1.6遍历字符串案例</h3><p> . charAt(索引)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 字符串直接遍历</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//两个方法：</span><br>        <span class="hljs-comment">//charAt()：会根据索引获取对应的字符</span><br>        <span class="hljs-comment">//length(): 会返回字符串的长度</span><br>        <span class="hljs-comment">//遍历</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> str.charAt(i);<br>            System.out.println(c);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-7统计字符次数案例"><a href="#1-7统计字符次数案例" class="headerlink" title="1.7统计字符次数案例"></a>1.7统计字符次数案例</h3><h4 id="1-7-1案例需求"><a href="#1-7-1案例需求" class="headerlink" title="1.7.1案例需求"></a>1.7.1案例需求</h4><pre><code class="hljs">键盘录入一个字符串，统计该字符串中大写字母字符，小写字母字符，数字字符出现的次数(不考虑其他字符)</code></pre><h4 id="1-7-2代码实现"><a href="#1-7-2代码实现" class="headerlink" title="1.7.2代码实现"></a>1.7.2代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 统计个数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//键盘录入一个字符串，统计大写，小写，数字出现的次数</span><br><br><br>        <span class="hljs-comment">//1.键盘录入一个字符串</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入一个字符串&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sc.next();<br><br><br>        <span class="hljs-comment">//2.统计 --- 计数器count</span><br>        <span class="hljs-comment">//此时我要统计的有3样东西，所以要定义3个计数器分别进行统计</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">bigCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">smallCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numberCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//得到这个字符串里面每一个字符</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> str.charAt(i);<br>            <span class="hljs-comment">//对c进行判断</span><br>            <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) &#123;<br>                smallCount++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>)&#123;<br>                bigCount++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)&#123;<br>                numberCount++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//3.当循环结束之后，三个变量记录的就是对应的个数</span><br>        System.out.println(<span class="hljs-string">&quot;大写字符有:&quot;</span> + bigCount + <span class="hljs-string">&quot;个&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;小写字符有:&quot;</span> + smallCount + <span class="hljs-string">&quot;个&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;数字字符有:&quot;</span> + numberCount + <span class="hljs-string">&quot;个&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-8-金额转换"><a href="#1-8-金额转换" class="headerlink" title="1.8 金额转换"></a>1.8 金额转换</h3><h4 id="1-8-1-案例需求"><a href="#1-8-1-案例需求" class="headerlink" title="1.8.1 案例需求"></a>1.8.1 案例需求</h4><pre><code class="hljs">把2135变成：零佰零拾零万贰仟壹佰叁拾伍元 把789变成：零佰零拾零万零仟柒佰捌拾玖元</code></pre><h4 id="1-8-2-代码实现"><a href="#1-8-2-代码实现" class="headerlink" title="1.8.2 代码实现"></a>1.8.2 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.键盘录入一个金额</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> money;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请录入一个金额&quot;</span>);<br>            money = sc.nextInt();<br>            <span class="hljs-keyword">if</span> (money &gt;= <span class="hljs-number">0</span> &amp;&amp; money &lt;= <span class="hljs-number">9999999</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;金额无效&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//定义一个变量用来表示钱的大写</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">moneyStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-comment">//2.得到money里面的每一位数字,再转成中文</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//2135</span><br>            <span class="hljs-comment">//从右往左获取数据，因为右侧是数据的个位</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> money % <span class="hljs-number">10</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">capitalNumber</span> <span class="hljs-operator">=</span> getCapitalNumber(ge);<br>            <span class="hljs-comment">//把转换之后的大写拼接到moneyStr当中</span><br>            moneyStr = capitalNumber + moneyStr;<br>            <span class="hljs-comment">//第一次循环 ： &quot;伍&quot; + &quot;&quot; = &quot;伍&quot;</span><br>            <span class="hljs-comment">//第二次循环 ： &quot;叁&quot; + &quot;伍&quot; = &quot;叁伍&quot;</span><br>            <span class="hljs-comment">//去掉刚刚获取的数据</span><br>            money = money / <span class="hljs-number">10</span>;<br><br>            <span class="hljs-comment">//如果数字上的每一位全部获取到了，那么money记录的就是0，此时循环结束</span><br>            <span class="hljs-keyword">if</span> (money == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//3.在前面补0，补齐7位</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span> - moneyStr.length();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            moneyStr = <span class="hljs-string">&quot;零&quot;</span> + moneyStr;<br>        &#125;<br>        System.out.println(moneyStr);<span class="hljs-comment">//零零零贰壹叁伍</span><br><br>        <span class="hljs-comment">//4.插入单位</span><br>        <span class="hljs-comment">//定义一个数组表示单位</span><br>        String[] arr = &#123;<span class="hljs-string">&quot;佰&quot;</span>,<span class="hljs-string">&quot;拾&quot;</span>,<span class="hljs-string">&quot;万&quot;</span>,<span class="hljs-string">&quot;仟&quot;</span>,<span class="hljs-string">&quot;佰&quot;</span>,<span class="hljs-string">&quot;拾&quot;</span>,<span class="hljs-string">&quot;元&quot;</span>&#125;;<br>        <span class="hljs-comment">//               零    零   零   贰   壹   叁   伍</span><br><br>        <span class="hljs-comment">//遍历moneyStr，依次得到 零    零   零   贰   壹   叁   伍</span><br>        <span class="hljs-comment">//然后把arr的单位插入进去</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; moneyStr.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> moneyStr.charAt(i);<br>            <span class="hljs-comment">//把大写数字和单位拼接到result当中</span><br>            result = result + c + arr[i];<br>        &#125;<br><br>        <span class="hljs-comment">//5.打印最终结果</span><br>        System.out.println(result);<br><br>    &#125;<br><br><br>    <span class="hljs-comment">//定义一个方法把数字变成大写的中文</span><br>    <span class="hljs-comment">//1 -- 壹</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getCapitalNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> &#123;<br>        <span class="hljs-comment">//定义数组，让数字跟大写的中文产生一个对应关系</span><br>        String[] arr = &#123;<span class="hljs-string">&quot;零&quot;</span>, <span class="hljs-string">&quot;壹&quot;</span>, <span class="hljs-string">&quot;贰&quot;</span>, <span class="hljs-string">&quot;叁&quot;</span>, <span class="hljs-string">&quot;肆&quot;</span>, <span class="hljs-string">&quot;伍&quot;</span>, <span class="hljs-string">&quot;陆&quot;</span>, <span class="hljs-string">&quot;柒&quot;</span>, <span class="hljs-string">&quot;捌&quot;</span>, <span class="hljs-string">&quot;玖&quot;</span>&#125;;<br>        <span class="hljs-comment">//返回结果</span><br>        <span class="hljs-keyword">return</span> arr[number];<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-9-手机号屏蔽"><a href="#1-9-手机号屏蔽" class="headerlink" title="1.9 手机号屏蔽"></a>1.9 手机号屏蔽</h3><p>需求：以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽</p><p>最终效果为：<code>131****9468</code></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 手机号屏蔽</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test8</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽</span><br><span class="hljs-comment">        最终效果为：131****9468*/</span><br><br>        <span class="hljs-comment">//1.键盘录入一个手机号码</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入手机号码&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">phoneNumber</span> <span class="hljs-operator">=</span> sc.next();<span class="hljs-comment">//13112349408</span><br><br>        <span class="hljs-comment">//2.截取手机号码中的前三位</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">star</span> <span class="hljs-operator">=</span> phoneNumber.substring(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br><br>        <span class="hljs-comment">//3.截取手机号码中的最后四位</span><br>        <span class="hljs-comment">//此时我用substring方法，是用1个参数的，还是两个参数的？1个参数的会更好</span><br>        <span class="hljs-comment">//因为现在我要截取到最后，所以建议使用1个参数的。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> phoneNumber.substring(<span class="hljs-number">7</span>);<br><br>        <span class="hljs-comment">//4.拼接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> star + <span class="hljs-string">&quot;****&quot;</span> + end;<br><br>        System.out.println(result);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-10-敏感词替换"><a href="#1-10-敏感词替换" class="headerlink" title="1.10 敏感词替换"></a>1.10 敏感词替换</h3><p>需求1：键盘录入一个 字符串，如果字符串中包含（TMD），则使用***替换 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 敏感词替换</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test9</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.定义一个变量表示骂人的话</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">talk</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;TMD&quot;</span>;<br><br><br>        <span class="hljs-comment">//2.把这句话中的敏感词进行替换</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> talk.replace(<span class="hljs-string">&quot;TMD&quot;</span>, <span class="hljs-string">&quot;***&quot;</span>);<br><br>        <span class="hljs-comment">//3.打印</span><br>        System.out.println(talk);<br>        System.out.println(result);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>需求2：如果要替换的敏感词比较多怎么办？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 多个敏感词替换</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test10</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//实际开发中，敏感词会有很多很多</span><br><br>        <span class="hljs-comment">//1.先键盘录入要说的话</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入要说的话&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">talk</span> <span class="hljs-operator">=</span> sc.next();<span class="hljs-comment">//TMD,GDX,ctmd,ZZ</span><br><br>        <span class="hljs-comment">//2.定义一个数组用来存多个敏感词</span><br>        String[] arr = &#123;<span class="hljs-string">&quot;TMD&quot;</span>,<span class="hljs-string">&quot;GDX&quot;</span>,<span class="hljs-string">&quot;ctmd&quot;</span>,<span class="hljs-string">&quot;ZZ&quot;</span>,<span class="hljs-string">&quot;lj&quot;</span>,<span class="hljs-string">&quot;FW&quot;</span>,<span class="hljs-string">&quot;nt&quot;</span>&#125;;<br><br>        <span class="hljs-comment">//3.把说的话中所有的敏感词都替换为***</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-comment">//i 索引</span><br>            <span class="hljs-comment">//arr[i] 元素 --- 敏感词</span><br>            talk = talk.replace(arr[i],<span class="hljs-string">&quot;***&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//4.打印结果</span><br>        System.out.println(talk);<span class="hljs-comment">//***,***,***,***</span><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-11-身份证信息查看"><a href="#1-11-身份证信息查看" class="headerlink" title="1.11 身份证信息查看"></a>1.11 身份证信息查看</h3><pre><code class="hljs">身份证的每一位都是有固定的含义：</code></pre><ul><li>1、2位：省份 </li><li>3、4位：城市 </li><li>5、6位：区县 </li><li>7-14位：出生年、月、日 </li><li>15、16位：所在地派出所 </li><li>17位：性别（奇数男性，偶数女性）</li><li>18位：个人信息码（随机产生）</li></ul><p>要求打印内容方式如下：</p><pre><code class="hljs">人物信息为：出生年月日：XXXX年X月X日性别为：男/女</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo11</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.定义一个字符串记录身份证号码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;321281202001011234&quot;</span>;<br><br>        <span class="hljs-comment">//2.获取出生年月日</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> id.substring(<span class="hljs-number">6</span>, <span class="hljs-number">10</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> id.substring(<span class="hljs-number">10</span>, <span class="hljs-number">12</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> id.substring(<span class="hljs-number">12</span>, <span class="hljs-number">14</span>);<br><br><br>        System.out.println(<span class="hljs-string">&quot;人物信息为：&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;出生年月日:&quot;</span> + year + <span class="hljs-string">&quot;年&quot;</span> + month + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日&quot;</span>);<br><br>        <span class="hljs-comment">//3.获取性别</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> id.charAt(<span class="hljs-number">16</span>);<span class="hljs-comment">//&#x27;3&#x27;  ---&gt; 3</span><br>        <span class="hljs-comment">//利用ASCII码表进行转换</span><br>        <span class="hljs-comment">//&#x27;0&#x27; ---&gt;  48</span><br>        <span class="hljs-comment">//&#x27;1&#x27; ---&gt;  49</span><br>        <span class="hljs-comment">//&#x27;2&#x27; ---&gt;  50</span><br>        <span class="hljs-comment">//&#x27;3&#x27; ---&gt;  51</span><br>        <span class="hljs-comment">//&#x27;4&#x27; ---&gt;  52</span><br>        <span class="hljs-comment">//&#x27;5&#x27; ---&gt;  53</span><br>        <span class="hljs-comment">//&#x27;6&#x27; ---&gt;  54</span><br>        <span class="hljs-comment">//&#x27;7&#x27; ---&gt;  55</span><br>        <span class="hljs-comment">//&#x27;8&#x27; ---&gt;  56</span><br>        <span class="hljs-comment">//&#x27;9&#x27; ---&gt;  57</span><br><br>       <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> gender - <span class="hljs-number">48</span>;<br>        <span class="hljs-keyword">if</span>(num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;性别为:女&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;性别为:男&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-StringBuilder"><a href="#2-StringBuilder" class="headerlink" title="2.StringBuilder"></a>2.StringBuilder</h2><p>StringBuilder 可以看成是一个容器，创建之后里面的内容是可变的。</p><p>当我们在拼接字符串和反转字符串的时候会使用到</p><h3 id="2-1-构造方法"><a href="#2-1-构造方法" class="headerlink" title="2.1 构造方法"></a>2.1 构造方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder()</td><td>创建一个空白可变字符串对象，不含有任何内容</td></tr><tr><td>public StringBuilder(String str)</td><td>根据字符串的内容，来创建可变字符串对象.初始化存在str</td></tr></tbody></table><h3 id="2-2-常用方法"><a href="#2-2-常用方法" class="headerlink" title="2.2 常用方法"></a>2.2 常用方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder append(任意类型)</td><td>添加数据，并返回对象本身</td></tr><tr><td>public StringBuilder reverse()</td><td>反转容器中的内容</td></tr><tr><td>public int length（）</td><td>返回长度（字符出现的个数）</td></tr><tr><td>public String toString()</td><td>把StringBuilder转换为String</td></tr></tbody></table><h3 id="2-3-基本使用"><a href="#2-3-基本使用" class="headerlink" title="2.3 基本使用"></a>2.3 基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBuilderDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//0.创建对象</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><br>        <span class="hljs-comment">//1.添加元素</span><br>        <span class="hljs-comment">/*sb.append(1);</span><br><span class="hljs-comment">        sb.append(2.3);</span><br><span class="hljs-comment">        sb.append(true);</span><br><span class="hljs-comment">        System.out.println(sb);//结果 abc12.3true</span><br><span class="hljs-comment">        */</span><br>        <br>        <span class="hljs-comment">//2.反转</span><br>        sb.reverse();<br>System.out.println(sb);<span class="hljs-comment">//结果 cba</span><br>        <span class="hljs-comment">//3.获取长度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> sb.length();<br>        System.out.println(len);<span class="hljs-comment">//结果 3</span><br><br><span class="hljs-comment">//4.把StringBuilder变回String</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sb.toString();<br><br>        <span class="hljs-comment">//打印</span><br>        <span class="hljs-comment">//普及：</span><br>        <span class="hljs-comment">//因为StringBuilder是Java已经写好的类</span><br>        <span class="hljs-comment">//java在底层对他做了一些特殊处理。</span><br>        <span class="hljs-comment">//打印对象不是地址值而是属性值。</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-链式编程"><a href="#2-4-链式编程" class="headerlink" title="2.4 链式编程"></a>2.4 链式编程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBuilderDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.创建对象</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-comment">//2.添加字符串</span><br>        sb.append(<span class="hljs-string">&quot;aaa&quot;</span>).append(<span class="hljs-string">&quot;bbb&quot;</span>).append(<span class="hljs-string">&quot;ccc&quot;</span>).append(<span class="hljs-string">&quot;ddd&quot;</span>);<br><br>        System.out.println(sb);<span class="hljs-comment">//aaabbbcccddd</span><br><br>        <span class="hljs-comment">//3.再把StringBuilder变回字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sb.toString();<br>        System.out.println(str);<span class="hljs-comment">//aaabbbcccddd</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-StringJoiner"><a href="#3-StringJoiner" class="headerlink" title="3. StringJoiner"></a>3. StringJoiner</h2><ul><li>StringJoiner跟StringBuilder一样，也可以看成是一个容器，创建之后里面的内容是可变的。</li><li>作用：提高字符串的操作效率，而且代码编写特别简洁，但是目前市场上很少有人用。 </li><li>JDK8出现的</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringJoiner（间隔符号）</td><td>指定拼接的间隔符号</td></tr><tr><td>public StringJoiner（间隔符号，开始符号，结束符号）</td><td>指定拼接的间隔符号，开始符号，结束符号</td></tr></tbody></table><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringJoiner add(任意类型)</td><td>添加数据，并返回对象本身</td></tr><tr><td>public int length（）</td><td>返回长度（字符出现的个数）</td></tr><tr><td>public String toString()</td><td>把StringBuilder转换为String</td></tr></tbody></table><p>基本使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建一个对象，并指定中间的间隔符号</span><br><span class="hljs-type">StringJoiner</span> <span class="hljs-variable">sj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;---&quot;</span>);<br><span class="hljs-comment">//2.添加元素</span><br>sj.add(<span class="hljs-string">&quot;aaa&quot;</span>).add(<span class="hljs-string">&quot;bbb&quot;</span>).add(<span class="hljs-string">&quot;ccc&quot;</span>);<br><span class="hljs-comment">//3.打印结果</span><br>System.out.println(sj);<span class="hljs-comment">//aaa---bbb---ccc</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建对象</span><br><span class="hljs-type">StringJoiner</span> <span class="hljs-variable">sj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;, &quot;</span>,<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>);<br><span class="hljs-comment">//2.添加元素</span><br>sj.add(<span class="hljs-string">&quot;aaa&quot;</span>).add(<span class="hljs-string">&quot;bbb&quot;</span>).add(<span class="hljs-string">&quot;ccc&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> sj.length();<br>System.out.println(len);<span class="hljs-comment">//15</span><br><span class="hljs-comment">//3.打印</span><br>System.out.println(sj);<span class="hljs-comment">//[aaa, bbb, ccc]</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sj.toString();<br>System.out.println(str);<span class="hljs-comment">//[aaa, bbb, ccc]</span><br></code></pre></td></tr></table></figure><h2 id="关于字符串的底层原理："><a href="#关于字符串的底层原理：" class="headerlink" title="关于字符串的底层原理："></a>关于字符串的底层原理：</h2><ol><li><p>字符串存储的内存原理</p><p>String s &#x3D; “abc”；直接赋值</p><p>特点：</p><pre><code class="hljs">此时字符串abc是存在字符串常量池中的。先检查字符串常量池中有没有字符串abc，如果有，不会创建新的，而是直接复用。如果没有abc，才会创建一个新的。</code></pre><p>所以，直接赋值的方式，代码简单，而且节约内存。</p></li><li><p>new出来的字符串</p><p>看到new关键字，一定是在堆里面开辟了一个小空间。</p><p>String s1 &#x3D; new String（“abc”）；</p><p>String s2 &#x3D; “abc”；</p><p>s1记录的是new出来的，在堆里面的地址值。</p><p>s2是直接赋值的，所以记录的是字符串常量池中的地址值。</p></li><li><p><code>==</code>号比较的到底是什么？</p><p>如果比较的是基本数据类型：比的是具体的数值是否相等。</p><p>如果比较的是引用数据类型：比的是地址值是否相等。</p><p>结论：<code>==</code>只能用于比较基本数据类型。不能比较引用数据类型。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>08-Java面向对象</title>
    <link href="/2023/06/29/08-Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2023/06/29/08-Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="1-类和对象"><a href="#1-类和对象" class="headerlink" title="1. 类和对象"></a>1. 类和对象</h2><h3 id="1-1-类和对象的理解"><a href="#1-1-类和对象的理解" class="headerlink" title="1.1 类和对象的理解"></a>1.1 类和对象的理解</h3><p>客观存在的事物皆为对象 ，所以我们也常常说万物皆对象。</p><ul><li>类<ul><li>类的理解<ul><li>类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>类是对象的数据类型，类是具有相同属性和行为的一组对象的集合</li><li>简单理解：类就是对现实事物的一种描述</li></ul></li><li>类的组成<ul><li>属性：指事物的特征，例如：手机事物（品牌，价格，尺寸）</li><li>行为：指事物能执行的操作，例如：手机事物（打电话，发短信）</li></ul></li></ul></li><li>类和对象的关系<ul><li>类：类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>对象：是能够看得到摸的着的真实存在的实体</li><li>简单理解：<strong>类是对事物的一种描述，对象则为具体存在的事物</strong></li></ul></li></ul><h3 id="1-2-类的定义"><a href="#1-2-类的定义" class="headerlink" title="1.2 类的定义"></a>1.2 类的定义</h3><p>类的组成是由属性和行为两部分组成</p><ul><li>属性：在类中通过成员变量来体现（类中方法外的变量）</li><li>行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）</li></ul><p>类的定义步骤：</p><p>①定义类<br>    类名首字母建议大写，需要见名知意，驼峰模式。<br>    一个Java文件中可以定义多个class类，且只能一个类是public修饰，而且public修饰的类名必须成为代码文件名。<br>    实际开发中建议还是一个文件定义一个class类。</p><p>②编写类的成员变量<br>    修饰符 数据类型 变量名称 &#x3D; 初始化值；</p><p>③编写类的成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> class 类名 &#123;<br><span class="hljs-comment">// 成员变量</span><br>变量<span class="hljs-number">1</span>的数据类型 变量<span class="hljs-number">1</span>；<br>变量<span class="hljs-number">2</span>的数据类型 变量<span class="hljs-number">2</span>;<br>…<br><span class="hljs-comment">// 成员方法</span><br>方法<span class="hljs-number">1</span>;<br>方法<span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    手机类：</span><br><span class="hljs-comment">        类名：</span><br><span class="hljs-comment">        手机(Phone)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        成员变量：</span><br><span class="hljs-comment">        品牌(brand)</span><br><span class="hljs-comment">        价格(price)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        成员方法：</span><br><span class="hljs-comment">        打电话(call)</span><br><span class="hljs-comment">        发短信(sendMessage)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-comment">//成员变量</span><br>    String brand;<br>    <span class="hljs-type">int</span> price;<br><br>    <span class="hljs-comment">//成员方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;打电话&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;发短信&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>定义类的补充注意事项</p><ul><li><p>用来描述一类事物的类，专业叫做：Javabean类。<br> 在javabean类中，是不写main方法的。</p></li><li><p>在以前，编写main方法的类，叫做测试类。<br> 我们可以在测试类中创建javabean类的对象并进行赋值调用。</p></li></ul><p>定义类技巧</p><ul><li>属性多为名词</li><li>动词多为行为</li></ul><h3 id="1-3-对象的使用"><a href="#1-3-对象的使用" class="headerlink" title="1.3 对象的使用"></a>1.3 对象的使用</h3><ul><li>创建对象的格式：<ul><li>类名 对象名 &#x3D; new 类名();</li></ul></li><li>调用成员的格式：<ul><li>对象名.成员变量</li><li>对象名.成员方法();</li></ul></li><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    创建对象</span><br><span class="hljs-comment">        格式：类名 对象名 = new 类名();</span><br><span class="hljs-comment">        范例：Phone p = new Phone();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    使用对象</span><br><span class="hljs-comment">        1：使用成员变量</span><br><span class="hljs-comment">            格式：对象名.变量名</span><br><span class="hljs-comment">            范例：p.brand</span><br><span class="hljs-comment">        2：使用成员方法</span><br><span class="hljs-comment">            格式：对象名.方法名()</span><br><span class="hljs-comment">            范例：p.call()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PhoneDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br><br>        <span class="hljs-comment">//使用成员变量</span><br>        System.out.println(p.brand);<br>        System.out.println(p.price);<br><br>        p.brand = <span class="hljs-string">&quot;小米&quot;</span>;<br>        p.price = <span class="hljs-number">2999</span>;<br><br>        System.out.println(p.brand);<br>        System.out.println(p.price);<br><br>        <span class="hljs-comment">//使用成员方法</span><br>        p.call();<br>        p.sendMessage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-对象内存图"><a href="#2-对象内存图" class="headerlink" title="2. 对象内存图"></a>2. 对象内存图</h2><h3 id="2-1-单个对象内存图"><a href="#2-1-单个对象内存图" class="headerlink" title="2.1 单个对象内存图"></a>2.1 单个对象内存图</h3><p>1.加载class文件<br>2.申明局部变量<br>3.在堆内存中开辟一个空间<br>4.默认初始化<br>5.显示初始化<br>6.构造方法初始化<br>7.将堆内存中的地址值赋值给左边的局部变量</p><ul><li>成员变量使用过程</li></ul><p><img src="/img/08-Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/a988fe806c874853b9932cd82f4f0ace.png"></p><ul><li>成员方法调用过程</li></ul><p><img src="/img/08-Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/9452a4e92a064994a789cf8933907fee.png"></p><h3 id="2-2-多个对象内存图"><a href="#2-2-多个对象内存图" class="headerlink" title="2.2 多个对象内存图"></a>2.2 多个对象内存图</h3><ul><li>成员变量使用过程</li></ul><p><img src="/img/08-Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3fc24a8afebb4205b22c3ab626fac3e1.png"></p><ul><li>成员方法调用过程</li></ul><p><img src="/img/08-Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/42357759542a4e1e928a5e259b3bbec0.png"></p><ul><li><p>总结：</p><p>多个对象在堆内存中，都有不同的内存划分，成员变量存储在各自的内存区域中，成员方法多个对象共用的一份</p></li></ul><h2 id="3-成员变量和局部变量"><a href="#3-成员变量和局部变量" class="headerlink" title="3. 成员变量和局部变量"></a>3. 成员变量和局部变量</h2><h3 id="3-1-成员变量和局部变量的区别"><a href="#3-1-成员变量和局部变量的区别" class="headerlink" title="3.1 成员变量和局部变量的区别"></a>3.1 成员变量和局部变量的区别</h3><table><thead><tr><th>区别</th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>类中位置不同</td><td>类中方法外</td><td>方法内部或方法声明上</td></tr><tr><td>初始化值不同</td><td>有默认初始化值</td><td>没有默认初始化值，必须先定义，赋值才能使用</td></tr><tr><td>内存中位置不同</td><td>堆内存</td><td>栈内存</td></tr><tr><td>生命周期不同</td><td>随着对象的存在而存在，随着对象的消失而消失</td><td>随着方法的调用而存在，醉着方法的调用完毕而消失</td></tr><tr><td>作用域</td><td>整个类中有效</td><td>当前方法中有效</td></tr></tbody></table><h2 id="4-封装"><a href="#4-封装" class="headerlink" title="4. 封装"></a>4. 封装</h2><p>黑马程序员Java P83</p><h3 id="4-1-封装思想"><a href="#4-1-封装思想" class="headerlink" title="4.1 封装思想"></a>4.1 封装思想</h3><ol><li><p>封装概述<br>是面向对象三大特征之一（封装，继承，多态）<br>有选择的暴露</p><p><strong>对象代表什么，就得封装对应的数据，并提供数据对应的行为</strong> （java bean类）</p></li><li><p>封装代码实现<br>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问<br>成员变量private，提供对应的getXxx()&#x2F;setXxx()方法</p></li></ol><h3 id="4-2-private关键字"><a href="#4-2-private关键字" class="headerlink" title="4.2 private关键字"></a>4.2 private关键字</h3><p>private是一个权限修饰符，可以用来修饰成员（成员变量，成员方法）</p><ul><li><p>被private修饰的成员，只能在本类进行访问，不能在其他类直接调用(如测试类).<br> 如果需要被其他类使用，提供相应的操作:</p><ul><li>提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰</li><li>提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰</li></ul></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    学生类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">//成员变量</span><br>    String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">//提供get/set方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>        <span class="hljs-keyword">if</span>(a&lt;<span class="hljs-number">0</span> || a&gt;<span class="hljs-number">120</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你给的年龄有误&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            age = a;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-comment">//成员方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;,&quot;</span> + age);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    学生测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-comment">//给成员变量赋值</span><br>        s.name = <span class="hljs-string">&quot;林青霞&quot;</span>;<br>        s.setAge(<span class="hljs-number">30</span>);<br>        <span class="hljs-comment">//调用show方法</span><br>        s.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-3-this关键字"><a href="#4-3-this关键字" class="headerlink" title="4.3 this关键字"></a>4.3 this关键字</h3><ul><li>&#x3D;&#x3D;this&#x3D;&#x3D;修饰的变量用于&#x3D;&#x3D;指代成员变量&#x3D;&#x3D;，其主要作用是（区分局部变量和成员变量的重名问题）<ul><li>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</li><li>方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量</li><li>不写this的话就是就近原则</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;,&quot;</span> + age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>this的内存原理<br> 黑马P89<br>this的本质:所在方法调用者的地址值</li></ul><h2 id="5-构造方法"><a href="#5-构造方法" class="headerlink" title="5. 构造方法"></a>5. 构造方法</h2><h3 id="5-1-构造方法概述"><a href="#5-1-构造方法概述" class="headerlink" title="5.1 构造方法概述"></a>5.1 构造方法概述</h3><p>构造方法是一种特殊的方法,也叫作构造器、构造函数。</p><ul><li>作用：<br> 创造对象的时候，由虚拟机自动调用构造方法，给成员变量进行初始化(即赋值)的。完成对象数据的初始化 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"> <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();  <span class="hljs-comment">//空参的构造方法</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">new为创建对象</span><br><span class="hljs-comment">空参构造先把对象创建出来,Student为自己创建的方法</span><br><span class="hljs-comment">后续在用   </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ul><ul><li>种类<br> 无参数构造方法：初始化的对象时，成员变量的数据均采用默认值。<br>有参数构造方法：在初始化对象的时候，同时可以为对象进行赋值。</li></ul><ul><li><p>格式： </p><p>public class 类名{<br>    修饰符 类名( 参数 ) {<br>    方法体;<br>    }<br>}</p></li><li><p>示例代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">//构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;无参构造方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;,&quot;</span> + age);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<span class="hljs-comment">// 无参构造方法</span><br>        s.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-构造方法的注意事项"><a href="#5-2-构造方法的注意事项" class="headerlink" title="5.2 构造方法的注意事项"></a>5.2 构造方法的注意事项</h3><ul><li><p>构造方法的定义<br> 如果没有定义构造方法，系统将给出一个默认的无参数构造方法<br>如果定义了构造方法，系统将不再提供默认的构造方法<br>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法</p></li><li><p>构造方法的重载<br> 带参构造方法和无参数构造方法，两者方法名相同，但是参数不同，这叫做构造方法的重载</p></li><li><p>推荐的使用方式<br> 无论是否使用，&#x3D;&#x3D;都写&#x3D;&#x3D;无参和带全部参数的构造方法</p></li><li><p>重要功能！</p></li></ul><p>可以使用带参构造，为成员变量进行初始化</p><ul><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    学生类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;,&quot;</span> + age);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        s1.show();<br><br>        <span class="hljs-comment">//public Student(String name)</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林青霞&quot;</span>);<br>        s2.show();<br><br>        <span class="hljs-comment">//public Student(int age)</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">30</span>);<br>        s3.show();<br><br>        <span class="hljs-comment">//public Student(String name,int age)</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林青霞&quot;</span>,<span class="hljs-number">30</span>);<br>        s4.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-标准JavaBean类制作"><a href="#5-3-标准JavaBean类制作" class="headerlink" title="5.3 标准JavaBean类制作"></a>5.3 标准JavaBean类制作</h3><p>① 类名需要见名知意</p><p>② 成员变量使用private修饰</p><p>③ 提供至少两个构造方法 </p><ul><li>无参构造方法</li><li>带全部参数的构造方法</li></ul><p>④ 成员方法 </p><ul><li>提供每一个成员变量对应的setXxx()&#x2F;getXxx()</li><li>如果还有其他行为，也需要写上</li></ul><h3 id="5-4-例1"><a href="#5-4-例1" class="headerlink" title="5.4 例1"></a>5.4 例1</h3><p>需求：</p><pre><code class="hljs">定义标准学生类，要求分别使用空参和有参构造方法创建对象，空参创建的对象通过setXxx赋值，有参创建的对象直接赋值，并通过show方法展示数据。 </code></pre><ul><li>示例代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">//成员变量</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">//构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">//成员方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;,&quot;</span> + age);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    创建对象并为其成员变量赋值的两种方式</span><br><span class="hljs-comment">        1:无参构造方法创建对象后使用setXxx()赋值</span><br><span class="hljs-comment">        2:使用带参构造方法直接创建带有属性值的对象</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//无参构造方法创建对象后使用setXxx()赋值</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        s1.setName(<span class="hljs-string">&quot;林青霞&quot;</span>);<br>        s1.setAge(<span class="hljs-number">30</span>);<br>        s1.show();<br><br>        <span class="hljs-comment">//使用带参构造方法直接创建带有属性值的对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;林青霞&quot;</span>,<span class="hljs-number">30</span>);<br>        s2.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4-例2"><a href="#5-4-例2" class="headerlink" title="5.4 例2"></a>5.4 例2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">//1.私有化全部的成员变量</span><br>    <span class="hljs-comment">//2.空参构造</span><br>    <span class="hljs-comment">//3.带全部参数的构造</span><br>    <span class="hljs-comment">//4.针对于每一个私有化的成员变量都要提供其对应的get和set方法</span><br>    <span class="hljs-comment">//5.如果当前事物还有其他行为，那么也要写出来，比如学生的吃饭，睡觉等行为</span><br><br>    <span class="hljs-keyword">private</span> String username;<span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> String password;<span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">private</span> String email;<span class="hljs-comment">//邮箱</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> gender;<span class="hljs-comment">//性别</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<span class="hljs-comment">//年龄</span><br><br>    <span class="hljs-comment">//空参构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">//带全部参数的构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String username, String password, String email, <span class="hljs-type">char</span> gender, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.email = email;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">//get和set</span><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(<span class="hljs-type">char</span> gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(username + <span class="hljs-string">&quot;在吃饭&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//写一个标准的javabean类</span><br>        <span class="hljs-comment">//咱们在课后只要能把这个标准的javabean能自己写出来，那么就表示今天的知识点就ok了</span><br><br><br>        <span class="hljs-comment">//利用空参构造创建对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        <span class="hljs-comment">//如果利用空参创建对象，还想赋值只能用set方法赋值</span><br>        u1.setUsername(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        u1.setPassword(<span class="hljs-string">&quot;1234qwer&quot;</span>);<br>        u1.setEmail(<span class="hljs-string">&quot;zjl256904767@outlook.com&quot;</span>);<br>        u1.setGender(<span class="hljs-string">&#x27;男&#x27;</span>);<br>        u1.setAge(<span class="hljs-number">23</span>);<br>        <span class="hljs-comment">//获取属性的值并打印</span><br>        System.out.println(u1.getUsername() + <span class="hljs-string">&quot;, &quot;</span> + u1.getPassword()<br>                + <span class="hljs-string">&quot;, &quot;</span> + u1.getEmail() + <span class="hljs-string">&quot;, &quot;</span> + u1.getGender() + <span class="hljs-string">&quot;, &quot;</span> + u1.getAge());<br>        u1.eat();<br><br>        System.out.println(<span class="hljs-string">&quot;=============================&quot;</span>);<br><br>        <span class="hljs-comment">//简单的办法</span><br>        <span class="hljs-comment">//利用带全部参数的构造来创建对象</span><br>        <span class="hljs-comment">//快捷键:ctrl + p</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-string">&quot;12345678&quot;</span>,<span class="hljs-string">&quot;lisi@outlook.com&quot;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">24</span>);<br>        System.out.println(u2.getUsername() + <span class="hljs-string">&quot;, &quot;</span> + u2.getPassword()<br>                + <span class="hljs-string">&quot;, &quot;</span> + u2.getEmail() + <span class="hljs-string">&quot;, &quot;</span> + u2.getGender() + <span class="hljs-string">&quot;, &quot;</span> + u2.getAge());<br>        u2.eat();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="6-基本数据类型与引用数据类型"><a href="#6-基本数据类型与引用数据类型" class="headerlink" title="6.基本数据类型与引用数据类型"></a>6.基本数据类型与引用数据类型</h2><p>从内存的角度去解释：<br>基本数据类型：数据值是存储在自己的空间中<br>引用数据类型：数据值是存储在其他空间中， 自己空间中存储的是地址值。</p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>07-Java方法</title>
    <link href="/2023/06/29/07-Java%E6%96%B9%E6%B3%95/"/>
    <url>/2023/06/29/07-Java%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1-方法概述"><a href="#1-方法概述" class="headerlink" title="1. 方法概述"></a>1. 方法概述</h2><h3 id="1-1-方法的概念"><a href="#1-1-方法的概念" class="headerlink" title="1.1 方法的概念"></a>1.1 方法的概念</h3><p>方法（method）是程序中最小的执行单元</p><p>注意：</p><ul><li>方法必须先创建才可以使用，该过程即为方法定义（把一些代码打包在一起）</li><li>方法定义后并不是直接运行，需要手动使用才执行，该过程即为方法调用</li></ul><h2 id="2-方法的定义和调用"><a href="#2-方法的定义和调用" class="headerlink" title="2. 方法的定义和调用"></a>2. 方法的定义和调用</h2><h3 id="2-1-无参数方法定义和调用"><a href="#2-1-无参数方法定义和调用" class="headerlink" title="2.1 无参数方法定义和调用"></a>2.1 无参数方法定义和调用</h3><ul><li><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> 方法名 (  ) &#123;<br><span class="hljs-comment">// 方法体;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">方法名();<br></code></pre></td></tr></table></figure></li><li><p>注意：<br> 方法必须先定义，后调用，否则程序将报错<br>方法定义要写在main方法外面，类的里面</p></li></ul><h3 id="2-2-有参数方法定义和调用"><a href="#2-2-有参数方法定义和调用" class="headerlink" title="2.2 有参数方法定义和调用"></a>2.2 有参数方法定义和调用</h3><ul><li><p>定义格式：  参数：数据类型 变量名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> 方法名 (参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2</span>, 参数<span class="hljs-number">3.</span>..) &#123;<br>方法体;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMax</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">方法名(参数)；<br><br>方法名(参数<span class="hljs-number">1</span>,参数<span class="hljs-number">2</span>)；<br></code></pre></td></tr></table></figure></li></ul><p>注意：</p><ul><li>方法定义时，参数中的数据类型与变量名都不能缺少</li><li>方法定义时，多个参数之间使用逗号( ，)分隔</li></ul><ul><li>方法调用时，参数的数量与类型必须与方法定义中的设置相匹配</li></ul><h3 id="2-3-形参和实参"><a href="#2-3-形参和实参" class="headerlink" title="2.3 形参和实参"></a>2.3 形参和实参</h3><ol><li>形参：方法定义中的参数</li></ol><p> 等同于变量定义格式，例如：int number</p><ol start="2"><li>实参：方法调用中的参数</li></ol><p>等同于使用变量或常量，例如： 10  number</p><h3 id="2-4-带返回值方法定义和调用"><a href="#2-4-带返回值方法定义和调用" class="headerlink" title="2.4 带返回值方法定义和调用"></a>2.4 带返回值方法定义和调用</h3><ul><li><p>定义格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> 返回值类型 方法名 ( 参数 ) &#123; <br>  方法体<br>   <span class="hljs-keyword">return</span> 返回值 ;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//直接调用</span><br>方法名 ( 实参 ) ;<br><br><span class="hljs-comment">//赋值调用</span><br>数据类型 变量名 = 方法名 ( 实参 ) ;<br><br><span class="hljs-comment">//输出调用</span><br>sout(方法名 ( 实参 ))<br></code></pre></td></tr></table></figure></li><li><p>范例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">isEvenNumber ( <span class="hljs-number">5</span> ) ;<br><span class="hljs-type">boolean</span>  <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span>  isEvenNumber ( <span class="hljs-number">5</span> ); <br></code></pre></td></tr></table></figure></li></ul><p>注意：</p><ul><li>方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错</li><li>方法的返回值通常会使用变量接收，否则该返回值将无意义</li></ul><h3 id="2-5-x3D-x3D-方法定义的小技巧-x3D-x3D"><a href="#2-5-x3D-x3D-方法定义的小技巧-x3D-x3D" class="headerlink" title="2.5&#x3D;&#x3D;方法定义的小技巧&#x3D;&#x3D;"></a>2.5&#x3D;&#x3D;方法定义的小技巧&#x3D;&#x3D;</h3><ol start="0"><li>需要&#x3D;&#x3D;重复&#x3D;&#x3D;用到的模块定义为方法 </li><li>我要干什么？                                                （方法体）</li><li>我干这件事情需要什么才能完成？                （形参）</li><li>方法的调用处是否需要继续使用方法的结果 （返回值）</li></ol><h2 id="3-方法的注意事项"><a href="#3-方法的注意事项" class="headerlink" title="3. 方法的注意事项"></a>3. 方法的注意事项</h2><h3 id="3-1-方法的注意事项"><a href="#3-1-方法的注意事项" class="headerlink" title="3.1 方法的注意事项"></a>3.1 方法的注意事项</h3><ul><li><p>方法不能嵌套定义</p><p>示例代码：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodOne</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodTwo</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-comment">// 这里会引发编译错误!!!</span><br>    &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据</p><p>示例代码：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodTwo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//return 100; 编译错误，因为没有具体返回值类型</span><br>        <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">//System.out.println(100); return语句后面不能跟数据或代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li>return语句下面，不能编写代码，因为永远执行不到，属于无效的代码<br> 方法没有返回值：可以省路不写。如果书写，表示结束方法<br>方法有返回值：必须要写。表示结束方法和返回结果</li></ul><h3 id="3-2-方法的通用格式"><a href="#3-2-方法的通用格式" class="headerlink" title="3.2 方法的通用格式"></a>3.2 方法的通用格式</h3><ul><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> 返回值类型 方法名(参数) &#123;<br>   方法体; <br>   <span class="hljs-keyword">return</span> 数据 ;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>解释：</p></li></ul><p>public static 修饰符，目前先记住这个格式</p><p>返回值类型方法操作完毕之后返回的数据的数据类型</p><p>如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return</p><p>方法名调用方法时候使用的标识</p><p>参数由数据类型和变量名组成，多个参数之间用逗号隔开</p><p>方法体完成功能的代码块</p><p>return如果方法操作完毕，有数据返回，用于把数据返回给调用者</p><ul><li><p>定义方法时，要做到两个明确</p><ul><li>明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型</li><li>明确参数：主要是明确参数的类型和数量</li></ul></li><li><p>调用方法时的注意：</p><ul><li>void类型的方法，直接调用即可</li><li>非void类型的方法，推荐用变量接收调用</li></ul></li></ul><h2 id="4-方法重载"><a href="#4-方法重载" class="headerlink" title="4. 方法重载"></a>4. 方法重载</h2><h3 id="4-1-方法重载"><a href="#4-1-方法重载" class="headerlink" title="4.1 方法重载"></a>4.1 方法重载</h3><ul><li><p>方法重载概念</p><p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</p><ul><li>多个方法在&#x3D;&#x3D;同一类中&#x3D;&#x3D;</li><li>多个方法具有&#x3D;&#x3D;相同的方法名&#x3D;&#x3D;</li><li>多个方法的&#x3D;&#x3D;参数不相同&#x3D;&#x3D;，类型不同、数量不同 或 顺序不同(不建议)</li></ul></li></ul><ul><li>简单记：同一个类中，方法名相同，参数（形参）不同的方法。<br>           与返回值无关。只有三个条件，不看其他条件。</li></ul><p><strong>注意：</strong></p><ul><li><p>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</p></li><li><p>重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载</p></li><li><p>正确范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fn</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-comment">//方法体</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fn</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span> &#123;<br>    <span class="hljs-comment">//方法体</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">float</span> <span class="hljs-title function_">fn</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-comment">//方法体</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fn</span><span class="hljs-params">(<span class="hljs-type">int</span> a , <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-comment">//方法体</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>错误范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fn</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-comment">//方法体</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fn</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123; <span class="hljs-comment">/*错误原因：重载与返回值无关*/</span><br>    <span class="hljs-comment">//方法体</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDemo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fn</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>        <span class="hljs-comment">//方法体</span><br>    &#125;<br>&#125; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDemo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fn</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span> &#123; <span class="hljs-comment">/*错误原因：这是两个类的两个fn方法*/</span><br>        <span class="hljs-comment">//方法体</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-2-方法重载练习"><a href="#6-2-方法重载练习" class="headerlink" title="6.2 方法重载练习"></a>6.2 方法重载练习</h3><ul><li><p>需求：使用方法重载的思想，设计比较两个整数是否相同的方法，兼容全整数类型（byte,short,int,long） </p></li><li><p>思路：</p><ul><li>①定义比较两个数字的是否相同的方法compare()方法，参数选择两个int型参数</li><li>②定义对应的重载方法，变更对应的参数类型，参数变更为两个long型参数</li><li>③定义所有的重载方法，两个byte类型与两个short类型参数 </li><li>④完成方法的调用，测试运行结果</li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//调用方法</span><br>        System.out.println(compare(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>));<br>        System.out.println(compare((<span class="hljs-type">byte</span>) <span class="hljs-number">10</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">20</span>));<br>        System.out.println(compare((<span class="hljs-type">short</span>) <span class="hljs-number">10</span>, (<span class="hljs-type">short</span>) <span class="hljs-number">20</span>));<br>        System.out.println(compare(<span class="hljs-number">10L</span>, <span class="hljs-number">20L</span>));<br>    &#125;<br><br>    <span class="hljs-comment">//int</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;int&quot;</span>);<br>        <span class="hljs-keyword">return</span> a == b;<br>    &#125;<br><br>    <span class="hljs-comment">//byte</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">byte</span> a, <span class="hljs-type">byte</span> b)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;byte&quot;</span>);<br>        <span class="hljs-keyword">return</span> a == b;<br>    &#125;<br><br>    <span class="hljs-comment">//short</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">short</span> a, <span class="hljs-type">short</span> b)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;short&quot;</span>);<br>        <span class="hljs-keyword">return</span> a == b;<br>    &#125;<br><br>    <span class="hljs-comment">//long</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">long</span> a, <span class="hljs-type">long</span> b)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;long&quot;</span>);<br>        <span class="hljs-keyword">return</span> a == b;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="7-3-数组遍历"><a href="#7-3-数组遍历" class="headerlink" title="7.3 数组遍历"></a>7.3 数组遍历</h3><ul><li><p>需求：设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55] </p></li><li><p>思路：</p><ul><li><p>①因为要求结果在一行上输出，所以这里需要在学习一个新的输出语句System.out.print(“内容”);</p><p>System.out.println(“内容”); 输出内容并换行</p><p>System.out.print(“内容”); 输出内容不换行</p><p>System.out.println(); 起到换行的作用</p></li><li><p>②定义一个数组，用静态初始化完成数组元素初始化</p></li><li><p>③定义一个方法，用数组遍历通用格式对数组进行遍历</p></li><li><p>④用新的输出语句修改遍历操作</p></li><li><p>⑤调用遍历方法</p></li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">/*  //先打印数据，再进行换行</span><br><span class="hljs-comment">        System.out.println(&quot;aaa&quot;);</span><br><span class="hljs-comment">        //只打印不换行</span><br><span class="hljs-comment">        System.out.print(&quot;bbb&quot;);</span><br><span class="hljs-comment">        System.out.print(&quot;ddd&quot;);</span><br><span class="hljs-comment">        //不打印任何内容，只换行</span><br><span class="hljs-comment">        System.out.println();</span><br><span class="hljs-comment">        System.out.print(&quot;cc&quot;);*/</span><br>        <span class="hljs-comment">//设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55]</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        printArr(arr);<br>    &#125;<br>    <span class="hljs-comment">//1.我要遍历数组</span><br>    <span class="hljs-comment">//2.需要什么？  数组</span><br>    <span class="hljs-comment">//3.调用处是否需要使用方法的结果。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArr</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;[&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i == arr.length - <span class="hljs-number">1</span>)&#123;<br>                System.out.println(arr[i] + <span class="hljs-string">&quot;]&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.print(arr[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="7-4-数组最大值"><a href="#7-4-数组最大值" class="headerlink" title="7.4 数组最大值"></a>7.4 数组最大值</h3><ul><li><p>需求：设计一个方法用于获取数组中元素的最大值 </p></li><li><p>思路：</p><ul><li>①定义一个数组，用静态初始化完成数组元素初始化</li><li>②定义一个方法，用来获取数组中的最大值，最值的认知和讲解我们在数组中已经讲解过了</li><li>③调用获取最大值方法，用变量接收返回结果</li><li>④把结果输出在控制台</li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodTest02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义一个数组，用静态初始化完成数组元素初始化</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">45</span>, <span class="hljs-number">98</span>, <span class="hljs-number">73</span>, <span class="hljs-number">60</span>&#125;;<br><br>        <span class="hljs-comment">//调用获取最大值方法，用变量接收返回结果</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> getMax(arr);<br><br>        <span class="hljs-comment">//把结果输出在控制台</span><br>        System.out.println(<span class="hljs-string">&quot;number:&quot;</span> + number);<br>    &#125;<br><br>    <span class="hljs-comment">//定义一个方法，用来获取数组中的最大值</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        两个明确：</span><br><span class="hljs-comment">            返回值类型：int</span><br><span class="hljs-comment">            参数：int[] arr</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMax</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>; x&lt;arr.length; x++) &#123;<br>            <span class="hljs-keyword">if</span>(arr[x] &gt; max) &#123;<br>                max = arr[x];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="7-6-获取索引"><a href="#7-6-获取索引" class="headerlink" title="7.6 获取索引"></a>7.6 获取索引</h3><p>需求：</p><pre><code class="hljs">定义一个方法获取数字，在数组中的索引位置，将结果返回给调用处，如果有重复的，只要获取第一个即可。</code></pre><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义一个方法获取数字，在数组中的索引位置，将结果返回给调用处</span><br>        <span class="hljs-comment">//如果有重复的，只要获取第一个即可</span><br><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> contains(arr, <span class="hljs-number">3</span>);<br>        System.out.println(index);<br>    &#125;<br><br>    <span class="hljs-comment">//1. 我要干嘛？判断数组中的某一个数是否存在</span><br>    <span class="hljs-comment">//2. 需要什么？数组 数字</span><br>    <span class="hljs-comment">//3. 调用处是否需要继续使用？返回</span><br>    <span class="hljs-comment">//获取number在arr中的位置</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> number)</span> &#123;<br>        <span class="hljs-comment">//遍历arr得到每一个元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-comment">//拿着每一个元素跟number比较</span><br>            <span class="hljs-keyword">if</span>(arr[i] == number)&#123;<br>                <span class="hljs-comment">//如果相等，表示找到了</span><br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//当循环结束之后，如果还不能返回索引，表示数组中不存在该数据</span><br>        <span class="hljs-comment">//可以返回-1</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>06-Java数组</title>
    <link href="/2023/06/29/06-Java%E6%95%B0%E7%BB%84/"/>
    <url>/2023/06/29/06-Java%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h1><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>指的是一种容器，可以同来存储&#x3D;&#x3D;同种数据类型&#x3D;&#x3D;的多个值。</p><p>但是数组容器在存储数据的时候，需要结合隐式转换考虑。</p><p><strong>建议：</strong>容器的类，和存储的数据类型保持一致。</p><h1 id="2-数组的定义"><a href="#2-数组的定义" class="headerlink" title="2.数组的定义"></a>2.数组的定义</h1><h3 id="格式一："><a href="#格式一：" class="headerlink" title="格式一："></a>格式一：</h3><p>(常用)<br>数据类型 [ ] 数组名 </p><p>比如：<code>int [ ] array</code></p><h3 id="格式二："><a href="#格式二：" class="headerlink" title="格式二："></a>格式二：</h3><p>数据类型  数组名 []</p><p>比如：<code> int array []</code></p><h1 id="3-数组的静态初始化"><a href="#3-数组的静态初始化" class="headerlink" title="3.数组的静态初始化"></a>3.数组的静态初始化</h1><h3 id="完整格式："><a href="#完整格式：" class="headerlink" title="完整格式："></a>完整格式：</h3><p>数据类型 [] 数组名 &#x3D; new 数据类型[]{元素1，元素2，元素3，元素4…};</p><p>比如：<code>int[] arr = new int[]&#123;11,22,33&#125;;</code></p><h3 id="简化格式"><a href="#简化格式" class="headerlink" title="简化格式 :"></a>简化格式 :</h3><p>数据类型[] 数组名 &#x3D; {元素1，元素2，元素3，元素4…};</p><p>比如：<code>int[] array = &#123;1,2,3,4,5&#125;;</code></p><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><ul><li>等号前后的数据类型必须保持一致。</li><li>数组一旦创建之后，长度不能发生变化。</li></ul><h1 id="4-地址值"><a href="#4-地址值" class="headerlink" title="4.地址值"></a>4.地址值</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>System.out.println(arr);<span class="hljs-comment">//[I@6d03e736</span><br><br><span class="hljs-type">double</span>[] arr2 = &#123;<span class="hljs-number">1.1</span>,<span class="hljs-number">2.2</span>,<span class="hljs-number">3.3</span>&#125;;<br>System.out.println(arr2);<span class="hljs-comment">//[D@568db2f2</span><br></code></pre></td></tr></table></figure><p>打印数组的时候，实际出现的是数组的&#x3D;&#x3D;地址值&#x3D;&#x3D;。</p><p>数组的地址值：就表示数组在内存中的位置。</p><p>以<code>[I@6d03e736</code>为例：</p><p><code>[</code>：表示现在打印的是一个数组。</p><p>I：表示现在打印的数组是int类型的。</p><p>@：仅仅是一个间隔符号而已。</p><p>6d03e736：就是数组在内存中真正的地址值。（十六进制的）</p><p>习惯性把<code>[I@6d03e736</code> 这个整体称之为数组的地址值。</p><h1 id="5-数组元素访问"><a href="#5-数组元素访问" class="headerlink" title="5.数组元素访问"></a>5.数组元素访问</h1><h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h3><p>数组名[索引];</p><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ul><li><p>获取数组中对应索引上的值</p></li><li><p>修改数组中对应索引上的值</p><p>一旦修改之后，原来的值就会被覆盖了。</p></li></ul><p><strong>例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <br>       <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>       <span class="hljs-comment">//需求1：获取arr数组中，3索引上的值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">3</span>];<br>        System.out.println(number);<br>        System.out.println(arr[<span class="hljs-number">3</span>]);<br><br>       <span class="hljs-comment">//需求2：将arr数组中，3索引上的值修改为10</span><br>            arr[<span class="hljs-number">3</span>] = <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;修改之后为:&quot;</span> + arr[<span class="hljs-number">3</span>]);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-数组的遍历"><a href="#6-数组的遍历" class="headerlink" title="6.数组的遍历"></a>6.数组的遍历</h1><p>遍历：把数组里面所有的内容一个一个全部取出来。</p><p>数组的长度：数组名.length;</p><p>通用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>    <span class="hljs-comment">//在循环的过程中，i依次表示数组中的每一个索引</span><br>    sout(arr[i]);<span class="hljs-comment">//就可以把数组里面的每一个元素都获取出来，并打印在控制台上了。</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>附：</strong><br>idea快速遍历数组<br>数组名.fori </p><h1 id="7-数组的动态初始化"><a href="#7-数组的动态初始化" class="headerlink" title="7.数组的动态初始化"></a>7.数组的动态初始化</h1><p>只指定长度，无初始值</p><h3 id="格式：-1"><a href="#格式：-1" class="headerlink" title="格式："></a>格式：</h3><p>数据类型[] 数组名 &#x3D; new 数据类型[数组的长度];</p><h3 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义一个数组，存3个人的年龄，年龄未知</span><br><span class="hljs-type">int</span>[] agesArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure><h3 id="数组的默认初始化值："><a href="#数组的默认初始化值：" class="headerlink" title="数组的默认初始化值："></a>数组的默认初始化值：</h3><p>整数类型：0</p><p>小数类型：0.0</p><p>布尔类型：false</p><p>字符类型：’\u0000’</p><p>引用类型：null</p><h1 id="8-数组两种初始化方式的区别"><a href="#8-数组两种初始化方式的区别" class="headerlink" title="8.数组两种初始化方式的区别"></a>8.数组两种初始化方式的区别</h1><p>静态初始化：<code>int[] arr = &#123;1,2,3,4,5&#125;;</code></p><p>动态初始化：<code>int[] arr = new int[5];</code></p><p>静态初始化：手动指定数组的元素，系统会根据元素的个数，计算出数组的长度。</p><p>动态初始化：手动指定数组长度，由系统给出默认初始化值。</p><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><p>只明确元素个数，但是不明确具体的数据，推荐使用动态初始化。</p><p>已经明确了要操作的所有数据，推荐使用静态初始化。</p><h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h3><ul><li><p>使用数组来存储键盘录入的5个整数。</p><p><code>int[] arr = new int[5];</code></p></li><li><p>将全班的学生成绩存入数组中，已知学生成绩为：66,77,88,99,100</p><p><code>int[] arr = &#123;66,77,88,99,100&#125;;</code></p></li></ul><h1 id="9-二维数组"><a href="#9-二维数组" class="headerlink" title="9.二维数组"></a>9.二维数组</h1><h2 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h2><h3 id="格式：-2"><a href="#格式：-2" class="headerlink" title="格式："></a>格式：</h3><p><code>数据类型[][] 数组名=new 据类型[][] &#123;&#123;元素1，元素2&#125;,&#123;元素1，元素2&#125;&#125;</code><br>比如：<code> int[][] array = new int[][]&#123;&#123;11,22&#125;,&#123;33,44&#125;&#125;</code></p><h3 id="简化格式："><a href="#简化格式：" class="headerlink" title="简化格式："></a>简化格式：</h3><p><code>数据类型[][] 数组名=&#123;&#123;元素1，元素2&#125;,&#123;元素1，元素2&#125;&#125;</code></p><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p><code>arr[i][j]</code></p><h2 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历"></a>二维数组的遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">arr.fori<br>  arr[i].fori<br>    <span class="hljs-title function_">sout</span><span class="hljs-params">(arr[i][j])</span><br></code></pre></td></tr></table></figure><h2 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h2><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">`数据类型[][] 数组名=<span class="hljs-keyword">new</span> 数据类型[m][n]`<br><span class="hljs-comment">// m表示这个二维数组，可以存放多少个一维数组 </span><br><span class="hljs-comment">//n表示每一个一维数组，可以存放多少个元素</span><br></code></pre></td></tr></table></figure><h2 id="二维数组地址值"><a href="#二维数组地址值" class="headerlink" title="二维数组地址值"></a>二维数组地址值</h2><p><img src="/img/06-Java%E6%95%B0%E7%BB%84/85e10cf54f6a41e695ad103f5defcdd3.png"><br><img src="/img/06-Java%E6%95%B0%E7%BB%84/9d5945949af649db9f30f4101b5b2b38.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05-Java高级循环(forr while)</title>
    <link href="/2023/06/29/05-Java%E9%AB%98%E7%BA%A7%E5%BE%AA%E7%8E%AF-forr-while/"/>
    <url>/2023/06/29/05-Java%E9%AB%98%E7%BA%A7%E5%BE%AA%E7%8E%AF-forr-while/</url>
    
    <content type="html"><![CDATA[<h2 id="1-无限循环"><a href="#1-无限循环" class="headerlink" title="1.无限循环"></a>1.无限循环</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><pre><code class="hljs">又叫死循环。循环一直停不下来。</code></pre><h3 id="for格式："><a href="#for格式：" class="headerlink" title="for格式："></a>for格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(;;)&#123;<br>    System.out.println(<span class="hljs-string">&quot;循环执行一直在打印内容&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>解释：</p><p>初始化语句可以空着不写，表示循环之前不定义任何的控制变量。</p><p>条件判断语句可以空着不写，如果不写，默认表示true，循环一直进行。</p><p>条件控制语句可以空着不写，表示每次循环体执行完毕后，控制变量不做任何变化。</p><h3 id="while格式："><a href="#while格式：" class="headerlink" title="while格式："></a>while格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;循环执行一直在打印内容&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>解释：</p><pre><code class="hljs">小括号里面就不能省略了，true一定要写出来，否则代码会报错。</code></pre><h3 id="do…while格式："><a href="#do…while格式：" class="headerlink" title="do…while格式："></a>do…while格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;循环执行一直在打印内容&quot;</span>);<br>&#125;<span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>解释：</p><pre><code class="hljs">小括号里面就不能省略了，true一定要写出来，否则代码会报错。</code></pre><h3 id="无限循环的注意事项："><a href="#无限循环的注意事项：" class="headerlink" title="无限循环的注意事项："></a>无限循环的注意事项：</h3><ul><li>最为常用的格式：while</li><li>无限循环下面不能再写其他代码了，因为永远执行不到。</li></ul><h2 id="2-条件控制语句"><a href="#2-条件控制语句" class="headerlink" title="2.条件控制语句"></a>2.条件控制语句</h2><ul><li>break</li><li>continue</li></ul><h3 id="break"><a href="#break" class="headerlink" title="break:"></a>break:</h3><pre><code class="hljs">不能单独存在的。可以用在switch和循环中，表示结束，跳出的意思。</code></pre><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.吃1~5号包子</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;在吃第&quot;</span> + i + <span class="hljs-string">&quot;个包子&quot;</span>);<br>    <span class="hljs-comment">//2.吃完第三个的时候就不吃了</span><br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-keyword">break</span>;<span class="hljs-comment">//结束整个循环。</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue:"></a>continue:</h3><pre><code class="hljs">不能单独存在的。只能存在于循环当中。表示：跳过本次循环，继续执行下次循环。</code></pre><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.吃1~5号包子</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-comment">//2.第3个包子有虫子就跳过，继续吃下面的包子</span><br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-comment">//跳过本次循环（本次循环中，下面的代码就不执行了），继续执行下次循环。</span><br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;在吃第&quot;</span> + i + <span class="hljs-string">&quot;个包子&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-Random"><a href="#3-Random" class="headerlink" title="3. Random"></a>3. Random</h2><p>Random跟Scanner一样，也是Java提前写好的类，我们不需要关心是如何实现的，只要直接使用就可以了。</p><h3 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h3><ol><li>导包</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-comment">// 导包的动作必须出现在类定义的上边。</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span> ();<br><span class="hljs-comment">// 上面这个格式里面，只有r是变量名，可以变，其他的都不允许变。</span><br></code></pre></td></tr></table></figure><ol start="3"><li>生成随机数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> r.nextInt(随机数的范围);<br><span class="hljs-comment">// 上面这个格式里面，只有number是变量名，可以变，其他的都不允许变。</span><br><span class="hljs-comment">// 随机数范围的特点：从0开始，不包含指定值。比如：参数为10，生成的范围[0,10)</span><br></code></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.导包</span><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//2.创建对象</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-comment">//3.生成随机数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">100</span>);<span class="hljs-comment">//包左不包右，包头不包尾</span><br>        <span class="hljs-comment">//0 ~ 99</span><br>        System.out.println(number);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-逢七过"><a href="#4-逢七过" class="headerlink" title="4. 逢七过"></a>4. 逢七过</h2><p>需求：</p><pre><code class="hljs">朋友聚会的时候可能会玩一个游戏：逢7过 游戏规则：从任意一个数字开始报数，当你要报的数字是包含7或者是7的倍数时都要说过：过使用程序在控制台打印出1-100之间的满足逢七必过规则的数据 </code></pre><p>举例：</p><pre><code class="hljs">1 2 3 4 5 6 过 8 9 10 11 12 13 过 15 16 过 18 ...</code></pre><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*朋友聚会的时候可能会玩一个游戏：逢7过</span><br><span class="hljs-comment">        游戏规则：从任意一个数字开始报数，当你要报的数字是包含7或者是7的倍数时都要说过：过</span><br><span class="hljs-comment">        需求：使用程序在控制台打印出1-100之间的满足逢七必过规则的数据*/</span><br><span class="hljs-comment">//分析：</span><br><span class="hljs-comment">//个位7  十位7   7倍数</span><br><span class="hljs-comment">//1 2 3 4 5 6 过 8 9 10 11 12 13 过 15 16 过 18 19 20 过....</span><br><span class="hljs-comment">//69 过 过 过 过 过 过... 80</span><br><span class="hljs-comment">//1.得到1~100之间的每一个数字</span><br><span class="hljs-comment">//开始：1</span><br><span class="hljs-comment">//结束：100</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>    <span class="hljs-comment">//2.判断每一个数字，如果符合规则，就打印过，如果不符合规则就打印真实的数字</span><br>    <span class="hljs-keyword">if</span>(i % <span class="hljs-number">10</span> == <span class="hljs-number">7</span> || i / <span class="hljs-number">10</span> % <span class="hljs-number">10</span> == <span class="hljs-number">7</span>  ||  i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;过&quot;</span>);<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-平方根"><a href="#5-平方根" class="headerlink" title="5. 平方根"></a>5. 平方根</h2><p>需求：</p><pre><code class="hljs">键盘录入一个大于等于2的整数 x ，计算并返回 x 的 平方根 。结果只保留整数部分 ，小数部分将被舍去 。</code></pre><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*需求：键盘录入一个大于等于2的整数 x ，计算并返回 x 的 平方根 。</span><br><span class="hljs-comment">        结果只保留整数部分 ，小数部分将被舍去 。*/</span><br><br><br><span class="hljs-comment">//分析：</span><br><span class="hljs-comment">//平方根   16的平方根4</span><br><span class="hljs-comment">//         4的平方根2</span><br><br><br><span class="hljs-comment">// 10</span><br><span class="hljs-comment">// 1 * 1 = 1 &lt; 10</span><br><span class="hljs-comment">// 2 * 2 = 4 &lt; 10</span><br><span class="hljs-comment">// 3 * 3 = 9 &lt; 10</span><br><span class="hljs-comment">// 4 * 4 = 16 &gt; 10</span><br><span class="hljs-comment">//推断：10的平方根是在3~4之间。</span><br><br><br><span class="hljs-comment">// 20</span><br><span class="hljs-comment">// 1 * 1 = 1 &lt; 20</span><br><span class="hljs-comment">// 2 * 2 = 4 &lt; 20</span><br><span class="hljs-comment">// 3 * 3 = 9 &lt; 20</span><br><span class="hljs-comment">// 4 * 4 = 16 &lt; 20</span><br><span class="hljs-comment">// 5 * 5 = 25 &gt; 20</span><br><span class="hljs-comment">//推断：20的平方根是在4~5之间。</span><br><br><br><span class="hljs-comment">//在代码当中</span><br><span class="hljs-comment">//从1开始循环，拿着数字的平方跟原来的数字进行比较</span><br><span class="hljs-comment">//如果小于的，那么继续往后判断</span><br><span class="hljs-comment">//如果相等，那么当前数字就是平方根</span><br><span class="hljs-comment">//如果大于的，那么前一个数字就是平方跟的整数部分</span><br><br><br><span class="hljs-comment">//1.键盘录入一个整数</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个整数&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> sc.nextInt();<br><span class="hljs-comment">//2.从1开始循环判断</span><br><span class="hljs-comment">//开始：1 结束: number</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= number; i++) &#123;<br>    <span class="hljs-comment">//用i * i 再跟number进行比较</span><br>    <span class="hljs-keyword">if</span>(i * i == number)&#123;<br>        System.out.println(i + <span class="hljs-string">&quot;就是&quot;</span> + number + <span class="hljs-string">&quot;的平方根&quot;</span>);<br>        <span class="hljs-comment">//一旦找到了，循环就可以停止了，后面的数字就不需要再找了，提高代码的运行效率。</span><br>        <span class="hljs-keyword">break</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i * i &gt; number)&#123;<br>        System.out.println((i - <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;就是&quot;</span> + number + <span class="hljs-string">&quot;平方根的整数部分&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-判断是否为质数"><a href="#6-判断是否为质数" class="headerlink" title="6.判断是否为质数"></a>6.判断是否为质数</h2><p>需求：</p><pre><code class="hljs">键盘录入一个正整数 x ，判断该整数是否为一个质数。 </code></pre><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需求：键盘录入一个正整数 x ，判断该整数是否为一个质数。</span><br><br><span class="hljs-comment">//质数：</span><br><span class="hljs-comment">//如果一个整数只能被1和本身整除，那么这个数就是质数。否则这个数叫做合数</span><br><span class="hljs-comment">//7 = 1 * 7 质数</span><br><span class="hljs-comment">//8 = 1 * 8  2 * 4 合数</span><br><br><br><span class="hljs-comment">//分析：</span><br><span class="hljs-comment">//1.键盘录入一个正整数</span><br><span class="hljs-comment">//number</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个正整数&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> sc.nextInt();<span class="hljs-comment">//9</span><br><br><span class="hljs-comment">//定义一个变量，表示标记</span><br><span class="hljs-comment">//标记着number是否为一个质数</span><br><span class="hljs-comment">//true： 是一个质数</span><br><span class="hljs-comment">//false : 不是一个质数</span><br><br><span class="hljs-comment">//表示最初就认为number是一个质数</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br><br><span class="hljs-comment">//2.判断</span><br><span class="hljs-comment">//写一个循环，从2开始判断，一直判断到number-1为止</span><br><span class="hljs-comment">//看这个范围之内，有没有数字可以被number整除</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; number; i++) &#123;<br>    <span class="hljs-comment">//i 依次表示这个范围之内的每一个数字</span><br>    <span class="hljs-comment">//看number是否能被i整除就可以了</span><br>    <span class="hljs-keyword">if</span>(number % i == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">// 9 % 2 = 1</span><br>        flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//System.out.println(number + &quot;不是一个质数&quot;);</span><br>        <span class="hljs-keyword">break</span>;<br>    &#125;<span class="hljs-comment">/*else&#123;</span><br><span class="hljs-comment">                System.out.println(number + &quot;是一个质数&quot;);</span><br><span class="hljs-comment">            &#125;*/</span><br>&#125;<br><br><span class="hljs-comment">//只有当这个循环结束了，表示这个范围之内所有的数字都判断完毕了</span><br><span class="hljs-comment">//此时才能断定number是一个质数</span><br><span class="hljs-keyword">if</span>(flag)&#123;<br>    System.out.println(number + <span class="hljs-string">&quot;是一个质数&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    System.out.println(number + <span class="hljs-string">&quot;不是一个质数&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-猜数字小游戏"><a href="#7-猜数字小游戏" class="headerlink" title="7. 猜数字小游戏"></a>7. 猜数字小游戏</h2><p>需求：</p><pre><code class="hljs">程序自动生成一个1-100之间的随机数，在代码中使用键盘录入去猜出这个数字是多少？</code></pre><p>要求：</p><pre><code class="hljs">使用循环猜，一直猜中为止。</code></pre><p>思路分析：</p><ol><li>生成一个1-100之间的随机数</li><li>使用键盘录入去猜出这个数字是多少</li><li>把反复猜的代码写在循环中</li></ol><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.生成一个1-100之间的随机数</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<span class="hljs-comment">// 0 ~ 99 + 1 --- 1 ~ 100</span><br>System.out.println(number);<br><br><span class="hljs-comment">//2.使用键盘录入去猜出这个数字是多少？</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;请输入一个整数&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">guessNumber</span> <span class="hljs-operator">=</span> sc.nextInt();<br>    <span class="hljs-comment">//3.比较</span><br>    <span class="hljs-keyword">if</span>(guessNumber &gt; number)&#123;<br>        System.out.println(<span class="hljs-string">&quot;您猜的数字大了&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(guessNumber &lt; number)&#123;<br>        System.out.println(<span class="hljs-string">&quot;您猜的数字小了&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;恭喜你，猜中了&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04-Java判断和循环</title>
    <link href="/2023/06/29/04-Java%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/"/>
    <url>/2023/06/29/04-Java%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章-流程控制语句"><a href="#第一章-流程控制语句" class="headerlink" title="第一章 流程控制语句"></a>第一章 流程控制语句</h2><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。</p><h3 id="1-1-流程控制语句分类"><a href="#1-1-流程控制语句分类" class="headerlink" title="1.1 流程控制语句分类"></a>1.1 流程控制语句分类</h3><pre><code class="hljs">顺序结构判断和选择结构(if, switch)循环结构(for, while, do…while)</code></pre><h3 id="1-2-顺序结构"><a href="#1-2-顺序结构" class="headerlink" title="1.2 顺序结构"></a>1.2 顺序结构</h3><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p><p>顺序结构执行流程图：</p><p><img src="/img/04-Java%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/7ededb84db2e49cd8c0887a2f4873189.png"></p><h2 id="第二章-判断语句：if语句"><a href="#第二章-判断语句：if语句" class="headerlink" title="第二章 判断语句：if语句"></a>第二章 判断语句：if语句</h2><h3 id="2-1-if语句格式1"><a href="#2-1-if语句格式1" class="headerlink" title="2.1 if语句格式1"></a>2.1 if语句格式1</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (关系表达式) &#123;<br>    语句体;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行流程：</p><p>①首先计算关系表达式的值</p><p>②如果关系表达式的值为true就执行语句体</p><p>③如果关系表达式的值为false就不执行语句体</p><p>④继续执行后面的语句内容</p><p><img src="/img/04-Java%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/678e041956b54723a24ead3103ac6b28.png"><br>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;开始&quot;</span>);<br><span class="hljs-comment">//定义两个变量</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-comment">//需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b</span><br><span class="hljs-keyword">if</span>(a == b) &#123;<br>System.out.println(<span class="hljs-string">&quot;a等于b&quot;</span>);<br>&#125;<br><span class="hljs-comment">//需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c</span><br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span>(a == c) &#123;<br>System.out.println(<span class="hljs-string">&quot;a等于c&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-if语句格式2"><a href="#2-2-if语句格式2" class="headerlink" title="2.2 if语句格式2"></a>2.2 if语句格式2</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (关系表达式) &#123;<br>    语句体<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    语句体<span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行流程：</p><p>①首先计算关系表达式的值</p><p>②如果关系表达式的值为true就执行语句体1</p><p>③如果关系表达式的值为false就执行语句体2</p><p>④继续执行后面的语句内容</p><p><img src="/img/04-Java%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/39c52aa5d50049e48513a724a5aceb87.png"></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfDemo02</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;开始&quot;</span>);<br><span class="hljs-comment">//定义两个变量</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-comment">//需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b</span><br><span class="hljs-keyword">if</span>(a &gt; b) &#123;<br>System.out.println(<span class="hljs-string">&quot;a的值大于b&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;a的值不大于b&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-if语句格式3"><a href="#2-3-if语句格式3" class="headerlink" title="2.3 if语句格式3"></a>2.3 if语句格式3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">格式：<br><span class="hljs-keyword">if</span> (关系表达式<span class="hljs-number">1</span>) &#123;<br>    语句体<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (关系表达式<span class="hljs-number">2</span>) &#123;<br>    语句体<span class="hljs-number">2</span>;<br>&#125; <br>…<br><span class="hljs-keyword">else</span> &#123;<br>    语句体n+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行流程：</p><p>①首先计算关系表达式1的值</p><p>②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值</p><p>③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值</p><p>④…</p><p>⑤如果没有任何关系表达式为true，就执行语句体n+1。</p><p><img src="/img/04-Java%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/273c4ba80bbb4f51a924fb7b81f1d75c.png"></p><h2 id="第三章-switch语句"><a href="#第三章-switch语句" class="headerlink" title="第三章 switch语句"></a>第三章 switch语句</h2><h3 id="3-1-格式"><a href="#3-1-格式" class="headerlink" title="3.1 格式"></a>3.1 格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (表达式) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>语句体<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>语句体<span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br>...<br><span class="hljs-keyword">default</span>:<br>语句体n+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-执行流程："><a href="#3-2-执行流程：" class="headerlink" title="3.2 执行流程："></a>3.2 <strong>执行流程：</strong></h3><ul><li>首先计算出表达式的值 </li><li>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。 </li><li>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。</li></ul><h4 id="练习：运动计划"><a href="#练习：运动计划" class="headerlink" title="练习：运动计划"></a>练习：运动计划</h4><ul><li><p>需求：键盘录入星期数，显示今天的减肥活动。</p><p>周一：跑步  </p><p>周二：游泳  </p><p>周三：慢走  </p><p>周四：动感单车</p><p>周五：拳击  </p><p>周六：爬山  </p><p>周日：好好吃一顿</p></li><li><p>代码示例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.键盘录入一个整数表示星期</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入一个整数表示星期&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-comment">//2.书写一个switch语句去跟week进行匹配</span><br>        <span class="hljs-keyword">switch</span> (week)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.out.println(<span class="hljs-string">&quot;跑步&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.out.println(<span class="hljs-string">&quot;游泳&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                System.out.println(<span class="hljs-string">&quot;慢走&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                System.out.println(<span class="hljs-string">&quot;动感单车&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                System.out.println(<span class="hljs-string">&quot;拳击&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                System.out.println(<span class="hljs-string">&quot;爬山&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                System.out.println(<span class="hljs-string">&quot;好好吃一顿&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;输入错误，没有这个星期&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-switch的扩展知识："><a href="#3-3-switch的扩展知识：" class="headerlink" title="3.3 switch的扩展知识："></a>3.3 switch的扩展知识：</h3><ul><li><p>default的位置和省略情况</p><p>default可以放在任意位置，也可以省略</p></li><li><p>case穿透</p><p>不写break会引发case穿透现象</p></li><li><p>switch在JDK12的新特性</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">switch</span> (number) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> -&gt; System.out.println(<span class="hljs-string">&quot;一&quot;</span>);<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> -&gt; System.out.println(<span class="hljs-string">&quot;二&quot;</span>);<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span> -&gt; System.out.println(<span class="hljs-string">&quot;三&quot;</span>);<br>    <span class="hljs-keyword">default</span> -&gt; System.out.println(<span class="hljs-string">&quot;其他&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>switch和if第三种格式各自的使用场景</li></ul><p>当我们需要对一个范围进行判断的时候，用if的第三种格式</p><p>当我们把有限个数据列举出来，选择其中一个执行的时候，用switch语句</p><p>比如：</p><p>小明的考试成绩，如果用switch，那么需要写100个case，太麻烦了，所以用if简单。</p><p>如果是星期，月份，客服电话中0~9的功能选择就可以用switch</p><h2 id="第四章-循环结构"><a href="#第四章-循环结构" class="headerlink" title="第四章 循环结构"></a>第四章 循环结构</h2><h3 id="4-1-for循环结构（掌握）"><a href="#4-1-for循环结构（掌握）" class="headerlink" title="4.1 for循环结构（掌握）"></a>4.1 for循环结构（掌握）</h3><p>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形成死循环。 </p><h4 id="4-1-1-for循环格式："><a href="#4-1-1-for循环格式：" class="headerlink" title="4.1.1 for循环格式："></a>4.1.1 for循环格式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (初始化语句;条件判断语句;条件控制语句) &#123;<br>循环体语句;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>格式解释：</strong></p><ul><li>初始化语句：  用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样</li><li>条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去</li><li>循环体语句：  用于表示循环反复执行的内容，简单说就是循环反复执行的事情</li><li>条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去</li></ul><p><strong>执行流程：</strong></p><p>①执行初始化语句</p><p>②执行条件判断语句，看其结果是true还是false</p><pre><code class="hljs">         如果是false，循环结束         如果是true，继续执行</code></pre><p>③执行循环体语句</p><p>④执行条件控制语句</p><p>⑤回到②继续</p><p><strong>for循环书写技巧：</strong></p><ul><li>确定循环的开始条件</li><li>确定循环的结束条件</li><li>确定循环要重复执行的代码</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.确定循环的开始条件</span><br><span class="hljs-comment">//2.确定循环的结束条件</span><br><span class="hljs-comment">//3.确定要重复执行的代码</span><br><br><span class="hljs-comment">//需求：打印5次HelloWorld</span><br><span class="hljs-comment">//开始条件：1</span><br><span class="hljs-comment">//结束条件：5</span><br><span class="hljs-comment">//重复代码：打印语句</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-while循环"><a href="#4-2-while循环" class="headerlink" title="4.2 while循环"></a>4.2 while循环</h3><h4 id="4-2-1-格式："><a href="#4-2-1-格式：" class="headerlink" title="4.2.1 格式："></a>4.2.1 格式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">初始化语句;<br><span class="hljs-keyword">while</span>(条件判断语句)&#123;<br>循环体;<br>条件控制语句;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="实例：打印5次HelloWorld"><a href="#实例：打印5次HelloWorld" class="headerlink" title="实例：打印5次HelloWorld"></a>实例：打印5次HelloWorld</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">5</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br>    i++;<br>&#125;<br>System.out.println(i);<br></code></pre></td></tr></table></figure><h3 id="4-3-do…while循环"><a href="#4-3-do…while循环" class="headerlink" title="4.3 do…while循环"></a>4.3 do…while循环</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">初始化语句;<br><span class="hljs-keyword">do</span>&#123;<br>    循环体;<br>    条件控制语句;<br>&#125;<span class="hljs-keyword">while</span>(条件判断语句);<br></code></pre></td></tr></table></figure><p>特点：</p><pre><code class="hljs">先执行，再判断。</code></pre><h3 id="4-4-三种格式的区别："><a href="#4-4-三种格式的区别：" class="headerlink" title="4.4 三种格式的区别："></a>4.4 三种格式的区别：</h3><pre><code class="hljs">for和while循环，是先判断，再执行。do...while是先执行，再判断。当知道循环次数或者循环范围的时候，用for循环。当不知道循环次数，也不知道循环范围，但是知道循环的结束条件时，用while循环。</code></pre>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-Java运算符</title>
    <link href="/2023/06/29/03-Java%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2023/06/29/03-Java%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="1-运算符和表达式"><a href="#1-运算符和表达式" class="headerlink" title="1.运算符和表达式"></a>1.运算符和表达式</h1><h3 id="运算符："><a href="#运算符：" class="headerlink" title="运算符："></a>运算符：</h3><pre><code class="hljs">就是对常量或者变量进行操作的符号。比如： +  -  *  / </code></pre><h3 id="表达式："><a href="#表达式：" class="headerlink" title="表达式："></a>表达式：</h3><pre><code class="hljs">用运算符把常量或者变量连接起来的，符合Java语法的式子就是表达式。比如：a + b 这个整体就是表达式。而其中+是算术运算符的一种，所以这个表达式也称之为算术表达式。</code></pre><h1 id="2-算术运算符"><a href="#2-算术运算符" class="headerlink" title="2.算术运算符"></a>2.算术运算符</h1><p>分类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">+ - * / %<br></code></pre></td></tr></table></figure><p>运算特点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">+ - * :跟数学中一样.<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">/：<br><span class="hljs-number">1.</span>整数相除结果只能得到整除，如果结果想要是小数，必须要有小数参数。<br><span class="hljs-number">2.</span>小数直接参与运算，得到的结果有可能是不精确的。<br>案例：<br>System.out.println( <span class="hljs-number">10</span> / <span class="hljs-number">3</span>);<span class="hljs-comment">//3</span><br>System.out.println(<span class="hljs-number">10.0</span> / <span class="hljs-number">3</span>);<span class="hljs-comment">//3.3333333333333335</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">%：取模、取余。<br>   做的也是除法运算，只不过获取的是余数而已。<br>案例：<br>System.out.println(<span class="hljs-number">10</span> % <span class="hljs-number">2</span>);<span class="hljs-comment">//0</span><br>System.out.println(<span class="hljs-number">10</span> % <span class="hljs-number">3</span>);<span class="hljs-comment">//1</span><br>应用场景：<br><span class="hljs-comment">//可以利用取模来判断一个数是奇数还是偶数</span><br>System.out.println(<span class="hljs-number">15</span> % <span class="hljs-number">2</span>);<span class="hljs-comment">//1  奇数</span><br></code></pre></td></tr></table></figure><h3 id="练习：数值拆分"><a href="#练习：数值拆分" class="headerlink" title="练习：数值拆分"></a>练习：数值拆分</h3><p>需求：键盘录入一个三位数，将其拆分为个位、十位、百位后，打印在控制台</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.键盘录入一个三位数</span><br><span class="hljs-comment">//导包 --- 创建对象 --- 接收数据</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个三位数&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> sc.nextInt();<span class="hljs-comment">//123</span><br><br><span class="hljs-comment">//2.获取这个三位数的个位、十位、百位并打印出来</span><br><span class="hljs-comment">//公式：</span><br><span class="hljs-comment">//针对于任意的一个数而言</span><br><span class="hljs-comment">//个位： 数字 % 10</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ones</span> <span class="hljs-operator">=</span> number % <span class="hljs-number">10</span>;<br><span class="hljs-comment">//十位： 数字 / 10 % 10</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tens</span> <span class="hljs-operator">=</span> number / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br><span class="hljs-comment">//百位： 数字 / 100 % 10</span><br><span class="hljs-type">int</span> <span class="hljs-variable">hundreds</span> <span class="hljs-operator">=</span> number / <span class="hljs-number">100</span>  % <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//输出结果</span><br>System.out.println(ones);<br>System.out.println(tens);<br>System.out.println(hundreds);<br></code></pre></td></tr></table></figure><p>公式：</p><p>获取任意一个数上每一位数。</p><p>个位：数字 % 10</p><p>十位：数字 &#x2F; 10 % 10</p><p>百位：数字 &#x2F; 100 % 10</p><p>千位：数字 &#x2F; 1000 % 10</p><p>以此类推</p><h1 id="3-隐式转换"><a href="#3-隐式转换" class="headerlink" title="3.隐式转换"></a>3.隐式转换</h1><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>也叫自动类型提升。</p><p>就是把一个取值范围小的数据或者变量，赋值给另一个取值范围大的变量。此时不需要我们额外写代码单独实现，是程序自动帮我们完成的。</p><p>简单记忆：就是小的给大的，可以直接给。</p><h3 id="两种提升规则："><a href="#两种提升规则：" class="headerlink" title="两种提升规则："></a>两种提升规则：</h3><ul><li>取值范围小的，和取值范围大的进行运算，小的会先提升为大的，再进行运算。</li><li>byte、short、char三种类型的数据在运算的时候，都会直接先提升为int，然后再进行运算。</li></ul><h3 id="取值范围从小到大的关系："><a href="#取值范围从小到大的关系：" class="headerlink" title="取值范围从小到大的关系："></a>取值范围从小到大的关系：</h3><pre><code class="hljs">byte \&lt;short \&lt;int \&lt;long \&lt;float \&lt;double</code></pre><h1 id="4-强制转换"><a href="#4-强制转换" class="headerlink" title="4.强制转换"></a>4.强制转换</h1><h3 id="概念：-1"><a href="#概念：-1" class="headerlink" title="概念："></a>概念：</h3><p>如果要把一个取值范围大的数据或者变量赋值给另一个取值范围小的变量。是不允许直接操作。如果一定要这么干，就需要加入强制转换。</p><h3 id="书写格式："><a href="#书写格式：" class="headerlink" title="书写格式："></a>书写格式：</h3><pre><code class="hljs">目标数据类型 变量名 = （目标数据类型）被强转的数据；</code></pre><p>简单理解：要转成什么类型的，那么就在小括号中写什么类型就可以了。</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.3</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) a;<br>        System.out.println(b);<span class="hljs-comment">//12</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意点：</p><pre><code class="hljs">强制转换有可能会导致数据发生错误。（数据的精度丢失）</code></pre><h1 id="5-字符串的-操作"><a href="#5-字符串的-操作" class="headerlink" title="5.字符串的+操作"></a>5.字符串的+操作</h1><h3 id="核心技巧："><a href="#核心技巧：" class="headerlink" title="核心技巧："></a>核心技巧：</h3><ul><li>当+操作中出现字符串时，此时就是字符串的连接符，会将前后的数据进行拼接，并产生一个新的字符串。</li><li>当连续进行+操作时，从左到右逐个执行的。</li></ul><h1 id="6-字符串相加的练习："><a href="#6-字符串相加的练习：" class="headerlink" title="6.字符串相加的练习："></a>6.字符串相加的练习：</h1><p>案例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> + <span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>结果：”1abc1”</p><p>解释：</p><pre><code class="hljs">第一步： 1 + &quot;abc&quot;。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串&quot;1abc&quot;第二步：  &quot;1abc&quot; + 1。这个过程中，有字符串参与的，所以做的也是拼接操作，产生一个新的字符串&quot;1abc1&quot;</code></pre><p>案例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> + <span class="hljs-number">2</span> + <span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-number">2</span> + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>结果：“3abc21”</p><p>解释：</p><pre><code class="hljs">第一步：1 + 2 。在这个过程中，没有字符串参与的，所以做的是加法运算，结果为3。第二步：3 + &quot;abc&quot;。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串&quot;3abc&quot;。第三步：&quot;3abc&quot; + 2。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串&quot;3abc2&quot;。第四步：&quot;3abc2&quot; + 1。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串“3abc21”</code></pre><h1 id="8-字符的-操作"><a href="#8-字符的-操作" class="headerlink" title="8.字符的+操作"></a>8.字符的+操作</h1><h3 id="规则："><a href="#规则：" class="headerlink" title="规则："></a>规则：</h3><pre><code class="hljs">当+操作中出现了**字符**，会拿着字符到计算机内置的ASCII码表中去查对应的数字，然后再进行计算。</code></pre><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> c + <span class="hljs-number">0</span>;<br>System.out.println(result);<span class="hljs-comment">//97</span><br></code></pre></td></tr></table></figure><p>ASCII码表中：</p><pre><code class="hljs">&#39;a&#39;   -----    97&#39;A&#39;   -----    65</code></pre><h1 id="9-算术运算符的总结"><a href="#9-算术运算符的总结" class="headerlink" title="9.算术运算符的总结"></a>9.算术运算符的总结</h1><p>分类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">+ - * / %  这些操作跟小学数学几乎是一模一样的。<br></code></pre></td></tr></table></figure><p>注意点：</p><ul><li>&#x2F; 和 % 的区别：他们两个都是做除法运算，&#x2F;取结果的商。% 取结果的余数。</li><li>整数操作只能得到整数，如果想要得到小数，必须有浮点数参与运算。</li></ul><p>算术运算符的高级用法：</p><p>是以+为例进行的讲解，其余减法，乘法，除法的运算规则也是一样的。</p><p>特例：字符串只有+操作，没有其他操作。</p><h1 id="10-自增自减运算符"><a href="#10-自增自减运算符" class="headerlink" title="10.自增自减运算符"></a>10.自增自减运算符</h1><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">++  自增运算符<br>--  自减运算符<br></code></pre></td></tr></table></figure><p>++：就是把变量里面的值+1</p><p>–：就是把变量里面的值-1</p><h3 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h3><ul><li>放在变量的前面，我们叫做先++。 比如：++a</li><li>放在变量的后面，我们叫做后++。 比如：a++</li></ul><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><pre><code class="hljs">不管是先++，还是后++。单独写在一行的时候，运算结果是一模一样的。</code></pre><h3 id="案例：-1"><a href="#案例：-1" class="headerlink" title="案例："></a>案例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//++</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>a++;<span class="hljs-comment">//就是让变量a里面的值 + 1</span><br>System.out.println(a);<span class="hljs-comment">//11</span><br>++a;<span class="hljs-comment">//就是让变量a里面的值 + 1</span><br>System.out.println(a);<span class="hljs-comment">//12</span><br></code></pre></td></tr></table></figure><h3 id="自增自减运算符的应用场景："><a href="#自增自减运算符的应用场景：" class="headerlink" title="自增自减运算符的应用场景："></a>自增自减运算符的应用场景：</h3><p>某些情况下，变量需要进行加1或者减1的时候使用。</p><p>比如：过生日多一岁，就用到了自增运算符。</p><p>比如：购物商场中，选择商品数量，也用到了自增或者自减运算符。</p><p>比如：统计很多数据中，有多少个数据满足要求，也用到了自增运算符。</p><h1 id="11-赋值运算符"><a href="#11-赋值运算符" class="headerlink" title="11.赋值运算符"></a>11.赋值运算符</h1><p>最为常用的：&#x3D;</p><p>运算过程：就是把等号右边的结果赋值给左边的变量</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorDemo6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.最为简单的赋值运算符用法</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">//就是把10赋值给变量a</span><br>        System.out.println(a);<br><br>        <span class="hljs-comment">//2.如果等号右边需要进行计算。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b;<span class="hljs-comment">//先计算等号右边的，把计算的结果赋值给左边的变量</span><br>        System.out.println(c);<br><br>        <span class="hljs-comment">//3.特殊的用法</span><br>        a = a + <span class="hljs-number">10</span>;<span class="hljs-comment">//先计算等号右边的，把计算的结果赋值给左边的变量</span><br>        System.out.println(a);<span class="hljs-comment">//20</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="12-扩展赋值运算符"><a href="#12-扩展赋值运算符" class="headerlink" title="12.扩展赋值运算符"></a>12.扩展赋值运算符</h1><h3 id="分类：-1"><a href="#分类：-1" class="headerlink" title="分类："></a>分类：</h3><pre><code class="hljs">+=、-=、*=、/=、%=</code></pre><h3 id="运算规则："><a href="#运算规则：" class="headerlink" title="运算规则："></a>运算规则：</h3><pre><code class="hljs">就是把左边跟右边进行运算，把最终的结果赋值给左边，对右边没有任何影响。</code></pre><h3 id="案例：-2"><a href="#案例：-2" class="headerlink" title="案例："></a>案例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorDemo7</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//扩展赋值运算符</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        a += b;<span class="hljs-comment">//把左边和右边相加，再把最终的结果赋值给左边，对右边没有任何影响</span><br>        <span class="hljs-comment">// 相当于 a = a + b;</span><br>        System.out.println(a);<span class="hljs-comment">//30</span><br>        System.out.println(b);<span class="hljs-comment">//20</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意点：-1"><a href="#注意点：-1" class="headerlink" title="注意点："></a>注意点：</h3><p>扩展的赋值运算符中隐层还包含了一个强制转换。</p><p>以+&#x3D;为例。</p><p>a +&#x3D; b ;实际上相当于 a &#x3D; (byte)(a + b);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorDemo8</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-comment">//a += b;</span><br>        a = (<span class="hljs-type">byte</span>)(a + b);<br>        System.out.println(a);<span class="hljs-comment">//30</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="13-关系运算符"><a href="#13-关系运算符" class="headerlink" title="13.关系运算符"></a>13.关系运算符</h1><p>又叫比较运算符，其实就是拿着左边跟右边进行了判断而已。</p><h3 id="分类：-2"><a href="#分类：-2" class="headerlink" title="分类："></a>分类：</h3><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>就是判断左边跟右边是否相等，如果成立就是true，如果不成立就是false</td></tr><tr><td>!&#x3D;</td><td>就是判断左边跟右边是否不相等，如果成立就是true，如果不成立就是false</td></tr><tr><td>&gt;</td><td>就是判断左边是否大于右边，如果成立就是true，如果不成立就是false</td></tr><tr><td>&gt;&#x3D;</td><td>就是判断左边是否大于等于右边，如果成立就是true，如果不成立就是false</td></tr><tr><td>&lt;</td><td>就是判断左边是否小于右边，如果成立就是true，如果不成立就是false</td></tr><tr><td>&lt;&#x3D;</td><td>就是判断左边是否小于等于右边，如果成立就是true，如果不成立就是false</td></tr></tbody></table><h3 id="注意点：-2"><a href="#注意点：-2" class="headerlink" title="注意点："></a>注意点：</h3><ul><li>关系运算符最终的结果一定是布尔类型的。要么是true，要么是false</li><li>在写&#x3D;&#x3D;的时候，千万不要写成&#x3D;</li></ul><h1 id="14-逻辑运算符"><a href="#14-逻辑运算符" class="headerlink" title="14.逻辑运算符"></a>14.逻辑运算符</h1><h3 id="amp-和-的使用："><a href="#amp-和-的使用：" class="headerlink" title="&amp; 和 | 的使用："></a>&amp; 和 | 的使用：</h3><p>&amp;：逻辑与（而且）</p><pre><code class="hljs">两边都为真，结果才是真，只要有一个为假，那么结果就是假。</code></pre><p>|：逻辑或（或者）</p><pre><code class="hljs">两边都为假，结果才是假，只要有一个为真，那么结果就是真。</code></pre><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// &amp;  //两边都是真，结果才是真。</span><br>System.out.println(<span class="hljs-literal">true</span> &amp; <span class="hljs-literal">true</span>);<span class="hljs-comment">//true</span><br>System.out.println(<span class="hljs-literal">false</span> &amp; <span class="hljs-literal">false</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-literal">true</span> &amp; <span class="hljs-literal">false</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-literal">false</span> &amp; <span class="hljs-literal">true</span>);<span class="hljs-comment">//false</span><br><br>System.out.println(<span class="hljs-string">&quot;===================================&quot;</span>);<br><br><span class="hljs-comment">// | 或  //两边都是假，结果才是假，如果有一个为真，那么结果就是真。</span><br>System.out.println(<span class="hljs-literal">true</span> | <span class="hljs-literal">true</span>);<span class="hljs-comment">//true</span><br>System.out.println(<span class="hljs-literal">false</span> | <span class="hljs-literal">false</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>);<span class="hljs-comment">//true</span><br>System.out.println(<span class="hljs-literal">false</span> | <span class="hljs-literal">true</span>);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>  使用技巧：</p><pre><code class="hljs">  当两种条件只要满足其中一个的时候，可以使用或</code></pre><h3 id="（异或）的使用："><a href="#（异或）的使用：" class="headerlink" title="^（异或）的使用："></a>^（异或）的使用：</h3><pre><code class="hljs">在以后用的不多，了解一下即可。</code></pre><p>计算规则：如果两边相同，结果为false，如果两边不同，结果为true</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//^   //左右不相同，结果才是true，左右相同结果就是false</span><br>System.out.println(<span class="hljs-literal">true</span> ^ <span class="hljs-literal">true</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-literal">false</span> ^ <span class="hljs-literal">false</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-literal">true</span> ^ <span class="hljs-literal">false</span>);<span class="hljs-comment">//true</span><br>System.out.println(<span class="hljs-literal">false</span> ^ <span class="hljs-literal">true</span>);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h3 id="（取反）的使用："><a href="#（取反）的使用：" class="headerlink" title="!（取反）的使用："></a>!（取反）的使用：</h3><pre><code class="hljs">是取反，也叫做非。</code></pre><p>计算规则：false取反就是true，true取反就是false</p><p>温馨提示：<strong>取反最多只用一个。</strong></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(!<span class="hljs-literal">false</span>);<span class="hljs-comment">//true</span><br>System.out.println(!<span class="hljs-literal">true</span>);<span class="hljs-comment">//false</span><br><br>System.out.println(!!<span class="hljs-literal">false</span>);<span class="hljs-comment">//注意点：取反最多只用一个。</span><br></code></pre></td></tr></table></figure><h1 id="15-短路逻辑运算符"><a href="#15-短路逻辑运算符" class="headerlink" title="15.短路逻辑运算符"></a>15.短路逻辑运算符</h1><p>分类：  &amp;&amp;   ||</p><h3 id="amp-amp-："><a href="#amp-amp-：" class="headerlink" title="&amp;&amp;："></a>&amp;&amp;：</h3><pre><code class="hljs">运算结果跟&amp;是一模一样的，只不过具有短路效果。</code></pre><h3 id="："><a href="#：" class="headerlink" title="||："></a>||：</h3><pre><code class="hljs">运算结果跟|是一模一样的。只不过具有短路效果。</code></pre><h3 id="逻辑核心："><a href="#逻辑核心：" class="headerlink" title="逻辑核心："></a>逻辑核心：</h3><pre><code class="hljs">当左边不能确定整个表达式的结果，右边才会执行。当左边能确定整个表达式的结果，那么右边就不会执行了。从而提高了代码的运行效率。</code></pre><h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h3><ul><li><p>用户登录案例</p><p>用户名正确  &amp; 密码正确</p><p>如果使用一个&amp;，不管用户名是否正确都会去验证密码。</p></li></ul><p>思考：</p><pre><code class="hljs">如果用户名输入正确了，那么我们再判断密码是否正确，是符合业务逻辑的。但是如果用户名输入错误了，那么现在还有必要去比较密码吗？没有不要了。如果使用一个&amp;，那么左边和右边不管什么情况下，都会执行。用户名正确  &amp;&amp;  密码正确如果用户名输入正确了，那么才会验证密码是否输入正确。如果用户名输入错误了，那么就不会再去验证密码是否正确，最终的结果直接为false。从而提高了程序运行的效率。</code></pre><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><pre><code class="hljs">&amp;&amp; 和 &amp; 、||和|的运行结果都是一模一样的。但是短路逻辑运算符可以提高程序的运行效率。</code></pre><h3 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h3><pre><code class="hljs">最为常用： &amp;&amp;   ||   ！</code></pre><h1 id="16-三元运算符"><a href="#16-三元运算符" class="headerlink" title="16.三元运算符"></a>16.三元运算符</h1><p>又叫做：三元表达式或者问号冒号表达式。</p><h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h3><pre><code class="hljs">关系表达式 ？ 表达式1 ：表达式2 ；</code></pre><h3 id="计算规则："><a href="#计算规则：" class="headerlink" title="计算规则："></a>计算规则：</h3><ul><li>计算关系表达式的值。</li><li>如果关系表达式的值为真，那么执行表达式1。</li><li>如果关系表达式的值为假，那么执行表达式2。</li></ul><h3 id="注意点：-3"><a href="#注意点：-3" class="headerlink" title="注意点："></a>注意点：</h3><pre><code class="hljs">三元运算符的最终结果一定要被使用，要么赋值给一个变量，要么直接打印出来。</code></pre><h3 id="案例：-3"><a href="#案例：-3" class="headerlink" title="案例："></a>案例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorDemo12</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//需求：求两个数的较大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>        <span class="hljs-comment">//格式：关系表达式 ？ 表达式1 ： 表达式2 ；</span><br>        <span class="hljs-comment">//注意点：</span><br>        <span class="hljs-comment">//三元运算符的最终结果一定要被使用。</span><br>        <span class="hljs-comment">//要么赋值给一个变量，要么直接输出。</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span>  a &gt; b ? a : b ;<br>        System.out.println(max);<br><br><br>        System.out.println(a &gt; b ? a : b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-Java基础概念</title>
    <link href="/2023/06/29/02-Java%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <url>/2023/06/29/02-Java%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础概念"><a href="#Java基础概念" class="headerlink" title="Java基础概念"></a>Java基础概念</h1><h2 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h2><p>  注释是对代码的解释和说明文字。</p><p>  Java中的注释分为三种：</p><ul><li>单行注释：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这是单行注释文字</span><br></code></pre></td></tr></table></figure><ul><li>多行注释：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">这是多行注释文字</span><br><span class="hljs-comment">这是多行注释文字</span><br><span class="hljs-comment">这是多行注释文字</span><br><span class="hljs-comment">*/</span><br>注意：多行注释不能嵌套使用。<br></code></pre></td></tr></table></figure><ul><li>文档注释：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">这是多行注释文字</span><br><span class="hljs-comment">这是多行注释文字</span><br><span class="hljs-comment">这是多行注释文字</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="使用的技巧"><a href="#使用的技巧" class="headerlink" title="使用的技巧"></a>使用的技巧</h3><pre><code class="hljs">如果我们要对代码进行解释，那么就可以使用注释。当注释的内容比较少，一行就写完了，可以用单行注释。如果注释的内容比较多，需要写在多行，那么可以使用多行注释。</code></pre><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><pre><code class="hljs">注释的内容不会参与编译和运行的，仅仅是对代码的解释说明而已。所以，不管在注释当中写什么内容，都不会影响代码运行的结果。</code></pre><h2 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2. 关键字"></a>2. 关键字</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><pre><code class="hljs">被Java赋予了特定含义的英文单词。当我们在代码中写了关键字之后，程序在运行的时候，就知道要做什么事情了。</code></pre><table><thead><tr><th><strong>abstract</strong></th><th><strong>assert</strong></th><th><strong>boolean</strong></th><th><strong>break</strong></th><th><strong>byte</strong></th></tr></thead><tbody><tr><td><strong>case</strong></td><td><strong>catch</strong></td><td><strong>char</strong></td><td><strong>class</strong></td><td><strong>const</strong></td></tr><tr><td><strong>continue</strong></td><td><strong>default</strong></td><td><strong>do</strong></td><td><strong>double</strong></td><td><strong>else</strong></td></tr><tr><td><strong>enum</strong></td><td><strong>extends</strong></td><td><strong>final</strong></td><td><strong>finally</strong></td><td><strong>float</strong></td></tr><tr><td><strong>for</strong></td><td><strong>goto</strong></td><td><strong>if</strong></td><td><strong>implements</strong></td><td><strong>import</strong></td></tr><tr><td><strong>instanceof</strong></td><td><strong>int</strong></td><td><strong>interface</strong></td><td><strong>long</strong></td><td><strong>native</strong></td></tr><tr><td><strong>new</strong></td><td><strong>package</strong></td><td><strong>private</strong></td><td><strong>protected</strong></td><td><strong>public</strong></td></tr><tr><td><strong>return</strong></td><td><strong>strictfp</strong></td><td><strong>short</strong></td><td><strong>static</strong></td><td><strong>super</strong></td></tr><tr><td><strong>switch</strong></td><td><strong>synchronized</strong></td><td><strong>this</strong></td><td><strong>throw</strong></td><td><strong>throws</strong></td></tr><tr><td><strong>transient</strong></td><td><strong>try</strong></td><td><strong>void</strong></td><td><strong>volatile</strong></td><td><strong>while</strong></td></tr></tbody></table><h3 id="2-2-第一个关键字class"><a href="#2-2-第一个关键字class" class="headerlink" title="2.2 第一个关键字class"></a>2.2 第一个关键字class</h3><pre><code class="hljs">表示定义一个类 创建一个类。</code></pre><p>类：Java项目最基本的组成单元，一个完整的Java项目有可能会有成千上万个类来组成的。</p><p>class后面跟随的就是这个类的名字，简称：类名。</p><p>在类名后面会有一对大括号，表示这个类的内容。</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>解释：class表示定义类。</p><pre><code class="hljs">类名：HelloWorldHelloWorld后面的大括号表示这个类的范围。</code></pre><h2 id="3-字面量"><a href="#3-字面量" class="headerlink" title="3. 字面量"></a>3. 字面量</h2><p>作用：告诉程序员，数据在程序中的书写格式。</p><table><thead><tr><th><strong>字面量类型</strong></th><th><strong>说明</strong></th><th><strong>程序中的写法</strong></th></tr></thead><tbody><tr><td>整数</td><td>不带小数的数字</td><td>666，-88</td></tr><tr><td>小数</td><td>带小数的数字</td><td>13.14，-5.21</td></tr><tr><td>字符</td><td>必须使用单引号，有且仅能一个字符</td><td>‘A’，‘0’，   ‘我’</td></tr><tr><td>字符串</td><td>必须使用双引号，内容可有可无</td><td>“HelloWorld”，“程序员”</td></tr><tr><td>布尔值</td><td>布尔值，表示真假，只有两个值：true，false</td><td>true 、false</td></tr><tr><td>空值</td><td>一个特殊的值，空值</td><td>值是：null</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-number">10</span>); <span class="hljs-comment">// 输出一个整数</span><br>        System.out.println(<span class="hljs-number">5.5</span>); <span class="hljs-comment">// 输出一个小数</span><br>        System.out.println(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// 输出一个字符</span><br>        System.out.println(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 输出boolean值true</span><br>        System.out.println(<span class="hljs-string">&quot;程序员&quot;</span>); <span class="hljs-comment">// 输出字符串</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="区分技巧"><a href="#区分技巧" class="headerlink" title="区分技巧"></a>区分技巧</h3><ol><li>不带小数点的数字都是整数类型的字面量。</li><li>只要带了小数点，那么就是小数类型的字面量。</li><li>只要用双引号引起来的，不管里面的内容是什么，不管里面有没有内容，都是字符串类型的字面量。</li><li>字符类型的字面量必须用单引号引起来，不管内容是什么，但是个数有且只能有一个。</li><li>字符类型的字面量只有两个值，true、false。</li><li>空类型的字面量只有一个值，null。</li></ol><h2 id="4-变量"><a href="#4-变量" class="headerlink" title="4. 变量"></a>4. 变量</h2><h3 id="4-1-什么是变量？"><a href="#4-1-什么是变量？" class="headerlink" title="4.1 什么是变量？"></a>4.1 什么是变量？</h3><pre><code class="hljs">变量就在程序中临时存储数据的容器。但是这个容器中只能存一个值。</code></pre><h3 id="4-2-变量的定义格式"><a href="#4-2-变量的定义格式" class="headerlink" title="4.2 变量的定义格式"></a>4.2 变量的定义格式</h3><pre><code class="hljs">数据类型 变量名 = 数据值；</code></pre><h4 id="4-2-1-格式详解"><a href="#4-2-1-格式详解" class="headerlink" title="4.2.1 格式详解"></a>4.2.1 格式详解</h4><pre><code class="hljs">数据类型：限定了变量当中能存储什么类型的数据。如果要存10，那么数据类型就需要写整数类型。如果要存10.0，那么数据类型就需要写小数类型。变量名：其实就是这个容器的名字。当以后想要使用变量里面的数据时，直接使用变量名就可以了。数据值：真正存储在容器中的数据。分号：表示语句的结束，就跟以前写作文时候的句号是一样的。</code></pre><h4 id="4-2-2-常用的数据类型"><a href="#4-2-2-常用的数据类型" class="headerlink" title="4.2.2 常用的数据类型"></a>4.2.2 常用的数据类型</h4><pre><code class="hljs">整数：int小数：（浮点数）double其他数据类型稍后讲解</code></pre><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//定义一个整数类型的变量</span><br><span class="hljs-comment">//数据类型 变量名 = 数据值;</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br>System.out.println(a);<span class="hljs-comment">//16</span><br><br><span class="hljs-comment">//定义一个小数类型的变量</span><br><span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.1</span>;<br>System.out.println(b);<span class="hljs-comment">//10.1</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-3-变量的注意事项"><a href="#4-2-3-变量的注意事项" class="headerlink" title="4.2.3 变量的注意事项"></a>4.2.3 变量的注意事项</h4><ul><li>变量名不能重复</li><li>在一条语句中，可以定义多个变量。但是这种方式影响代码的阅读，所以了解一下即可。</li><li>变量在使用之前必须要赋值。</li></ul><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableDemo2</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//1.变量名不允许重复</span><br><span class="hljs-comment">//int a = 10;</span><br><span class="hljs-comment">//int a = 20;</span><br><span class="hljs-comment">//System.out.println(a);</span><br><br><span class="hljs-comment">//2.一条语句可以定义多个变量</span><br><span class="hljs-comment">//了解。</span><br><span class="hljs-comment">//int a = 10, b = 20, c = 20,d = 20;</span><br><span class="hljs-comment">//System.out.println(a);//?</span><br><span class="hljs-comment">//System.out.println(b);//?</span><br><br><br><span class="hljs-comment">//3.变量在使用之前必须要赋值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>System.out.println(a);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-变量的练习"><a href="#4-3-变量的练习" class="headerlink" title="4.3 变量的练习"></a>4.3 变量的练习</h3><pre><code class="hljs">需求：说出公交车到终点站之后，车上一共有多少乘客？        一开始没有乘客。       第一站：上去一位乘客，没有下来乘客。       第二站：上去两位乘客，下来一位乘客。       第三站：上去两位乘客，下来一位乘客。       第四站：没有上去乘客，下来一位乘客。       第五站：上去一位乘客，没有下来乘客。       问：到了终点站之后，车上一共多少乘客？代码解析：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableBus</span>&#123;<br><span class="hljs-comment">//主入口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//一开始没有乘客。</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//第一站：上去一位乘客</span><br><span class="hljs-comment">//在原有的基础上 + 1</span><br>count = count + <span class="hljs-number">1</span>;<br><span class="hljs-comment">//System.out.println(count);</span><br><span class="hljs-comment">//第二站：上去两位乘客，下来一位乘客</span><br>count = count + <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; <br><span class="hljs-comment">//第三站：上去两位乘客，下来一位乘客</span><br>count = count + <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br><span class="hljs-comment">//第四站：下来一位乘客</span><br>count = count - <span class="hljs-number">1</span>;<br><span class="hljs-comment">//第五站：上去一位乘客</span><br>count = count + <span class="hljs-number">1</span>;<br><span class="hljs-comment">//请问：到了终点站，车上一共几位乘客。</span><br>System.out.println(count);<span class="hljs-comment">//3</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-数据类型"><a href="#5-数据类型" class="headerlink" title="5. 数据类型"></a>5. 数据类型</h2><h3 id="5-1-Java语言数据类型的分类"><a href="#5-1-Java语言数据类型的分类" class="headerlink" title="5.1 Java语言数据类型的分类"></a>5.1 Java语言数据类型的分类</h3><ul><li>基本数据类型</li><li>引用数据类型（面向对象的时候再深入学习）</li></ul><h3 id="5-2-基本数据类型的四类八种"><a href="#5-2-基本数据类型的四类八种" class="headerlink" title="5.2 基本数据类型的四类八种"></a>5.2 基本数据类型的四类八种</h3><table><thead><tr><th align="center">数据类型</th><th align="center">关键字</th><th align="center">内存占用</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">整数</td><td align="center">byte</td><td align="center">1</td><td align="center">负的2的7次方 ~ 2的7次方-1(-128~127)</td></tr><tr><td align="center"></td><td align="center">short</td><td align="center">2</td><td align="center">负的2的15次方 ~ 2的15次方-1(-32768~32767)</td></tr><tr><td align="center"></td><td align="center">int</td><td align="center">4</td><td align="center">负的2的31次方 ~ 2的31次方-1</td></tr><tr><td align="center"></td><td align="center">long</td><td align="center">8</td><td align="center">负的2的63次方 ~ 2的63次方-1</td></tr><tr><td align="center">浮点数</td><td align="center">float</td><td align="center">4</td><td align="center">1.401298e^-45^ ~ 3.402823e^+38^</td></tr><tr><td align="center"></td><td align="center">double</td><td align="center">8</td><td align="center">4.9000000e^-324^ ~ 1.797693e^+308^</td></tr><tr><td align="center">字符</td><td align="center">char</td><td align="center">2</td><td align="center">0-65535</td></tr><tr><td align="center">布尔</td><td align="center">boolean</td><td align="center">1</td><td align="center">true，false</td></tr></tbody></table><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><pre><code class="hljs">e^+38^表示是乘以10的38次方，同样，e^-45^表示乘以10的负45次方。在java中整数默认是int类型，浮点数默认是double类型。</code></pre><h4 id="需要记忆以下几点"><a href="#需要记忆以下几点" class="headerlink" title="需要记忆以下几点"></a>需要记忆以下几点</h4><p>byte类型的取值范围：</p><pre><code class="hljs">-128 ~ 127</code></pre><p>int类型的大概取值范围：</p><pre><code class="hljs">-21亿多  ~ 21亿多</code></pre><p>整数类型和小数类型的取值范围大小关系：</p><pre><code class="hljs">double &gt; float &gt; long &gt; int &gt; short &gt; byte</code></pre><p>最为常用的数据类型选择：</p><ul><li><p>在定义变量的时候，要根据实际的情况来选择不同类型的变量。</p><p>比如：人的年龄，可以选择byte类型。</p><p>比如：地球的年龄，可以选择long类型。</p></li><li><p>如果整数类型中，不太确定范围，那么默认使用int类型。</p></li><li><p>如果小数类型中，不太确定范围，那么默认使用double类型。</p></li><li><p>如果要定义字符类型的变量，那么使用char</p></li><li><p>如果要定义布尔类型的变量，那么使用boolean</p></li></ul><h3 id="5-3-定义8种基本数据类型变量"><a href="#5-3-定义8种基本数据类型变量" class="headerlink" title="5.3 定义8种基本数据类型变量"></a>5.3 定义8种基本数据类型变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableDemo3</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//1.定义byte类型的变量</span><br>        <span class="hljs-comment">//数据类型 变量名 = 数据值;</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        System.out.println(a);<br><br>        <span class="hljs-comment">//2.定义short类型的变量</span><br>        <span class="hljs-type">short</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        System.out.println(b);<br><br>        <span class="hljs-comment">//3.定义int类型的变量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        System.out.println(c);<br><br>        <span class="hljs-comment">//4.定义long类型的变量</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">123456789123456789L</span>;<br>        System.out.println(d);<br><br>        <span class="hljs-comment">//5.定义float类型的变量</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.1F</span>;<br>        System.out.println(e);<br><br>        <span class="hljs-comment">//6.定义double类型的变量</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">20.3</span>;<br>        System.out.println(f);<br><br>        <span class="hljs-comment">//7.定义char类型的变量</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>        System.out.println(g);<br><br>        <span class="hljs-comment">//8.定义boolean类型的变量</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        System.out.println(h);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h4><ul><li>如果要定义 一个整数类型的变量，不知道选择哪种数据类型了，默认使用int。</li><li>如果要定义 一个小数类型的变量，不知道选择哪种数据类型了，默认使用double。</li><li>如果要定义一个long类型的变量，那么在数据值的后面需要加上L后缀。（大小写都可以，建议大写。）</li><li>如果要定义一个float类型的变量，那么在数据值的后面需要加上F后缀。（大小写都可以）</li></ul><h2 id="6-标识符"><a href="#6-标识符" class="headerlink" title="6. 标识符"></a>6. 标识符</h2><p>业内大多数程序员都在遵守阿里巴巴的命名规则。</p><h3 id="6-1-硬性要求："><a href="#6-1-硬性要求：" class="headerlink" title="6.1 硬性要求："></a>6.1 硬性要求：</h3><pre><code class="hljs">必须要这么做，否则代码会报错。</code></pre><ul><li>必须由数字、字母、下划线_、美元符号$组成。</li><li>数字不能开头</li><li>不能是关键字</li><li>区分大小写的。</li></ul><h3 id="6-2-软性建议："><a href="#6-2-软性建议：" class="headerlink" title="6.2 软性建议："></a>6.2 软性建议：</h3><pre><code class="hljs">如果不这么做，代码不会报错，但是会让代码显不规范。</code></pre><h3 id="6-2-1-小驼峰命名法"><a href="#6-2-1-小驼峰命名法" class="headerlink" title="6.2.1 小驼峰命名法"></a>6.2.1 小驼峰命名法</h3><p>适用于变量名和方法名</p><ul><li><p>如果是一个单词，那么全部小写，比如：name</p></li><li><p>如果是多个单词，那么从第二个单词开始，首字母大写，比如：firstName、maxAge</p></li></ul><h3 id="6-2-2-大驼峰命名法"><a href="#6-2-2-大驼峰命名法" class="headerlink" title="6.2.2 大驼峰命名法"></a>6.2.2 大驼峰命名法</h3><p>适用于类名</p><ul><li><p>如果是一个单词，那么首字母大写。比如：Demo、Test。</p></li><li><p>如果是多个单词，那么每一个单词首字母都需要大写。比如：HelloWorld</p></li></ul><p><strong>不管起什么名字，都要做到见名知意。</strong></p><h3 id="阿里巴巴命名规范细节："><a href="#阿里巴巴命名规范细节：" class="headerlink" title="阿里巴巴命名规范细节："></a>阿里巴巴命名规范细节：</h3><ol><li><p>尽量不要用拼音。但是一些国际通用的拼音可视为英文单词。</p><p>正确：alibaba、hangzhou、nanjing</p><p>错误：jiage、dazhe</p></li><li><p>平时在给变量名、方法名、类名起名字的时候，不要使用下划线或美元符号。</p><p>错误：_name</p><p>正确：name</p></li></ol><h2 id="7-键盘录入"><a href="#7-键盘录入" class="headerlink" title="7. 键盘录入"></a>7. 键盘录入</h2><pre><code class="hljs">键盘录入的实际功能Java已经帮我们写好了，不需要我们自己再实现了，而Java写好的功能都放在了Scanner这个类中，所以，我们只要直接使用Scanner这个类就可以了。</code></pre><p>使用步骤：</p><p>第一步：</p><pre><code class="hljs">导包：其实就是表示先找到Scanner这个类在哪。</code></pre><p>第二步：</p><pre><code class="hljs">创建对象：其实就表示申明一下，我准备开始用Scanner这个类了。</code></pre><p>第三步：</p><pre><code class="hljs">接收数据：也是真正干活的代码。</code></pre><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//导包，其实就是先找到Scanner这个类在哪</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerDemo1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//2.创建对象，其实就是申明一下，我准备开始用Scanner这个类了。</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-comment">//3.接收数据</span><br><span class="hljs-comment">//当程序运行之后，我们在键盘输入的数据就会被变量i给接收了</span><br>System.out.println(<span class="hljs-string">&quot;请输入一个数字&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<br>System.out.println(i);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01 Java入门</title>
    <link href="/2023/06/27/01-Java%E5%85%A5%E9%97%A8/"/>
    <url>/2023/06/27/01-Java%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Java概述"><a href="#1-Java概述" class="headerlink" title="1. Java概述"></a>1. Java概述</h2><h3 id="1-1-Java是什么？"><a href="#1-1-Java是什么？" class="headerlink" title="1.1 Java是什么？"></a>1.1 Java是什么？</h3><p>语言：人与人交流沟通的表达方式</p><p>计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言</p><p>我们想要让计算机做一些事情，那么就可以通过Java语言告诉计算机就可以了</p><h3 id="1-2-下载和安装"><a href="#1-2-下载和安装" class="headerlink" title="1.2 下载和安装"></a>1.2 下载和安装</h3><h4 id="1-2-1-下载"><a href="#1-2-1-下载" class="headerlink" title="1.2.1 下载"></a>1.2.1 下载</h4><p>通过官方网站获取JDK <a href="http://www.oracle.com/">http://www.oracle.com</a></p><p><strong>注意</strong>：针对不同的操作系统，需要下载对应版本的JDK。</p><h4 id="1-2-2-安装"><a href="#1-2-2-安装" class="headerlink" title="1.2.2 安装"></a>1.2.2 安装</h4><p>傻瓜式安装，下一步即可。默认的安装路径是在<code>C:\Program Files</code>下。</p><p>建议：</p><ul><li>安装在除C盘以外的盘内，在这里插入代码片安装路径不要有中文，不要有空格等一些特殊的符号。</li><li>以后跟开发相关的所有软件建议都安装在同一个文件夹中，方便管理。</li></ul><h4 id="1-2-3-JDK的安装目录介绍"><a href="#1-2-3-JDK的安装目录介绍" class="headerlink" title="1.2.3 JDK的安装目录介绍"></a>1.2.3 JDK的安装目录介绍</h4><table><thead><tr><th>目录名称</th><th>说明</th></tr></thead><tbody><tr><td>bin</td><td>该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。</td></tr><tr><td>conf</td><td>该路径下存放了JDK的相关配置文件。</td></tr><tr><td>include</td><td>该路径下存放了一些平台特定的头文件。</td></tr><tr><td>jmods</td><td>该路径下存放了JDK的各种模块。</td></tr><tr><td>legal</td><td>该路径下存放了JDK各模块的授权文档。</td></tr><tr><td>lib</td><td>该路径下存放了JDK工具的一些补充JAR包。</td></tr></tbody></table><h3 id="1-3-HelloWorld小案例"><a href="#1-3-HelloWorld小案例" class="headerlink" title="1.3 HelloWorld小案例"></a>1.3 HelloWorld小案例</h3><p>HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。各种计算机语言都习惯使用该案例作为第一个演示案例。</p><h4 id="1-3-1-Java程序开发运行流程"><a href="#1-3-1-Java程序开发运行流程" class="headerlink" title="1.3.1 Java程序开发运行流程"></a>1.3.1 Java程序开发运行流程</h4><p>开发Java程序，需要三个步骤：编写程序，编译程序，运行程序。</p><h4 id="1-3-2-HelloWorld案例的编写"><a href="#1-3-2-HelloWorld案例的编写" class="headerlink" title="1.3.2 HelloWorld案例的编写"></a>1.3.2 HelloWorld案例的编写</h4><ol><li><p>新建文本文档文件，修改名称为HelloWorld.java。</p><p><strong>注意</strong>：后缀名为java的才是java文件。</p></li><li><p>用记事本打开HelloWorld.java文件，输写程序内容。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>保存</p></li><li><p>编译文件。编译后会产生一个class文件。</p><p>java文件：程序员自己编写的代码。</p><p>class文件：交给计算机执行的文件。</p></li><li><p>运行代码</p><p><strong>注意</strong>：运行的是编译之后的class文件。</p></li></ol><blockquote><p>用到两个命令：</p><pre><code class="hljs">javac + 文件名 + 后缀名 （就是编译java文件）                                            java + 文件名（运行编译之后的class文件）</code></pre></blockquote><h3 id="1-4-HelloWorld案例常见问题"><a href="#1-4-HelloWorld案例常见问题" class="headerlink" title="1.4 HelloWorld案例常见问题"></a>1.4 HelloWorld案例常见问题</h3><p>1、非法字符问题。Java中的符号都是英文格式的。</p><p>2、大小写问题。Java语言对大小写敏感（区分大小写）。</p><p>3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。</p><p>4、编译命令后的java文件名需要带文件后缀.java</p><p>5、运行命令后的class文件名（类名）不带文件后缀.class</p><h3 id="1-5-环境变量"><a href="#1-5-环境变量" class="headerlink" title="1.5 环境变量"></a>1.5 环境变量</h3><h4 id="1-5-1-为什么配置环境变量"><a href="#1-5-1-为什么配置环境变量" class="headerlink" title="1.5.1 为什么配置环境变量"></a>1.5.1 为什么配置环境变量</h4><pre><code class="hljs">开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在bin目录下使用，而我们想要在任意目录下都能使用，所以就要配置环境变量。</code></pre><p>注意：现在从官网上下载的最新版本的JDK安装时会自动配置javac、java命令的路径到Path环境变量中去 ，所以javac、java可以直接使用。</p><h4 id="1-5-2-配置方式"><a href="#1-5-2-配置方式" class="headerlink" title="1.5.2 配置方式"></a>1.5.2 配置方式</h4><p>以前下载的老版本的JDK是没有自动配置的，而且自动配置的也只包含了4个工具而已，所以我们需要删掉已经配置完毕的，再次重新配置Path环境变量。</p><p><img src="/img/assets/18bc9fbdd5d44dcca776d761afabc52f.png"></p><p>① <strong>JAVA_HOME</strong>：告诉操作系统JDK安装在了哪个位置</p><p>② <strong>Path</strong>：告诉操作系统JDK提供的javac(编译)、java(执行)命令安装到了哪个位置</p><h3 id="1-6-Java语言的发展"><a href="#1-6-Java语言的发展" class="headerlink" title="1.6 Java语言的发展"></a>1.6 Java语言的发展</h3><p>三个版本：</p><ul><li>Java5.0：这是Java的第一个大版本更新。</li><li>Java8.0：这个是目前绝大数公司正在使用的版本。这个版本最为稳定。</li></ul><h3 id="1-7-Java的三大平台"><a href="#1-7-Java的三大平台" class="headerlink" title="1.7 Java的三大平台"></a>1.7 Java的三大平台</h3><p>JavaSE、JavaME、JavaEE</p><h4 id="1-7-1-JavaSE"><a href="#1-7-1-JavaSE" class="headerlink" title="1.7.1 JavaSE"></a>1.7.1 JavaSE</h4><p>是其他两个版本的基础。</p><h4 id="1-7-2-JavaME"><a href="#1-7-2-JavaME" class="headerlink" title="1.7.2 JavaME"></a>1.7.2 JavaME</h4><p>Java语言的小型版，用于嵌入式消费类电子设备或者小型移动设备的开发。</p><p>其中最为主要的还是小型移动设备的开发（手机）。渐渐的没落了，已经被安卓和IOS给替代了。</p><p>但是，安卓也是可以用Java来开发的。</p><h4 id="1-7-3-JavaEE"><a href="#1-7-3-JavaEE" class="headerlink" title="1.7.3 JavaEE"></a>1.7.3 JavaEE</h4><p>用于Web方向的网站开发。（主要从事后台服务器的开发）</p><h3 id="1-8-Java的主要特性"><a href="#1-8-Java的主要特性" class="headerlink" title="1.8 Java的主要特性"></a>1.8 Java的主要特性</h3><ul><li>面向对象</li><li>安全性</li><li>多线程</li><li>简单易用</li><li>开源</li><li>跨平台</li></ul><h4 id="1-8-1-Java语言跨平台的原理"><a href="#1-8-1-Java语言跨平台的原理" class="headerlink" title="1.8.1 Java语言跨平台的原理"></a>1.8.1 Java语言跨平台的原理</h4><ul><li>操作系统本身其实是不认识Java语言的。</li><li>但是针对于不同的操作系统，Java提供了不同的虚拟机。</li></ul><p>虚拟机会把Java语言翻译成操作系统能看得懂的语言。</p><p><img src="/img/assets/a009ce99cf0841e89f9c731e67b07b80.png"></p><h3 id="1-9-JRE和JDK"><a href="#1-9-JRE和JDK" class="headerlink" title="1.9 JRE和JDK"></a>1.9 JRE和JDK</h3><p><img src="/img/assets/5a5bce2705344fb29c0a39ceaf57573d.png"></p><p>JVM（Java Virtual Machine) : Java虚拟机</p><p>JRE（Java Runtime Environment) : Java运行环境，包含了JVM和Java的核心类库（Java API）</p><p>JDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具</p><p>总结：我们只需安装JDK即可，它包含了java的运行环境和虚拟机。</p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
